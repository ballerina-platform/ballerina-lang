/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'base'
apply from: "$rootDir/gradle/javaProject.gradle"
apply from: "$rootDir/gradle/ballerinaLangLibLoad.gradle"

configurations {
    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testCompile.exclude group: 'org.slf4j', module: 'slf4j-simple'
    testCompile.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
    distributionBala
    distributionBirJar
    balRt
    testRt
    testCore
    compilerPluginJar {
        transitive false
    }
}

dependencies {
    testCompile 'org.testng:testng'
    testCompile 'org.slf4j:slf4j-jdk14'
    testImplementation 'org.powermock:powermock-mockito-release-full'
    testImplementation 'org.powermock:powermock-module-testng-common'

    testCompile project(':ballerina-test-utils')
    testCompile project(':ballerina-lang')
    testRuntime project(':ballerina-runtime')
    testRuntime project(':project-api-test-artifact:logging-file-appender-plugin')
    testRuntime project(':compiler-plugins:package-semantic-analyzer')

    compilerPluginJar project(':project-api-test-artifact:event-logger-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-one-dependency')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-two-dependencies')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-codeactions')
    compilerPluginJar project(':project-api-test-artifact:string-utils-lib')
    compilerPluginJar project(':project-api-test-artifact:diagnostic-utils-lib')
    compilerPluginJar project(':project-api-test-artifact:function-node-analyzer-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:bad-sad-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:init-function-codegen-compiler-plugin')
    compilerPluginJar project(':compiler-plugins:package-semantic-analyzer')

    testRuntime project(":ballerina-lang-test")
    balRt project(':ballerina-rt')
    testRt project(':testerina:testerina-runtime')
    testCore project(':testerina:testerina-core')
}

task createTestDistributionCache(type: Copy) {
    dependsOn configurations.distributionBala
    from configurations.distributionBala
    into "$buildDir/repo"
}

task createTestBre(type: Copy) {
    from configurations.balRt
    from configurations.testRt
    from configurations.testCore
    from configurations.distributionBirJar
    into "$buildDir/bre/lib"
}

task copyCompilerPluginJars(type: Copy) {
    from configurations.compilerPluginJar
    into "$buildDir/compiler-plugin-jars"
}

test {
    dependsOn ':ballerina-lang:build'
    dependsOn copyCompilerPluginJars
    dependsOn createTestDistributionCache
    dependsOn createTestBre

    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        finalizedBy jacocoTestReport
    }

    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    dependsOn ':ballerina-lang:build'
    String langProjectBuildDir = project(":ballerina-lang").buildDir
    destinationFile = file("$buildDir/jacoco/all-test.exec")
    executionData = files("$buildDir/jacoco/test.exec", "$langProjectBuildDir/jacoco/test.exec")
}

jacocoTestReport.doFirst{
        String langProjectDir = project(":ballerina-lang").projectDir
        String langProjectBuildDir = project(":ballerina-lang").buildDir
        classDirectories = files("$langProjectBuildDir/classes/java/main/io/ballerina/projects")
        sourceDirectories = files("$langProjectDir/src/main/java")
        executionData = files("$buildDir/jacoco/all-test.exec")
}

jacocoTestReport.dependsOn(jacocoMergeTest)

ext.moduleName = 'io.ballerina.projects.test'

description = 'Ballerina - Project API tests'
