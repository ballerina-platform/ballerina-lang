/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'base'
apply from: "$rootDir/gradle/javaProject.gradle"
apply from: "$rootDir/gradle/ballerinaLangLibLoad.gradle"

configurations {
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-simple'
    testImplementation.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
    distributionBala
    distributionBirJar
    balRt
    testRt
    testCore
    compilerPluginJar {
        transitive false
    }
}

dependencies {
    testImplementation 'org.testng:testng'
    testImplementation 'org.slf4j:slf4j-jdk14'
    testImplementation "org.mockito:mockito-core:${project.mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-testng:${project.mockitoTestNGVersion}"
    testImplementation 'commons-io:commons-io'
    testImplementation 'com.google.code.gson:gson'
    testImplementation project(':ballerina-test-utils')
    testImplementation project(':ballerina-lang')
    testImplementation project(':ballerina-tools-api')
    testImplementation project(':ballerina-parser')
    testImplementation project(':toml-parser')

    testRuntimeOnly project(':ballerina-runtime')
    testRuntimeOnly project(':project-api-test-artifact:logging-file-appender-plugin')
    testRuntimeOnly project(':compiler-plugins:package-semantic-analyzer')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-modifier')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-generator')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-analyzer')

    compilerPluginJar project(':project-api-test-artifact:event-logger-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-one-dependency')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-two-dependencies')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-codeactions')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-completion-providers')
    compilerPluginJar project(':project-api-test-artifact:string-utils-lib')
    compilerPluginJar project(':project-api-test-artifact:diagnostic-utils-lib')
    compilerPluginJar project(':project-api-test-artifact:function-node-analyzer-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:bad-sad-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:init-function-codegen-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:init-function-code-modify-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:remove-function-code-modify-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:add-remove-function-code-modify-compiler-plugin')
    compilerPluginJar project(':compiler-plugins:package-semantic-analyzer')
    compilerPluginJar project(':project-api-test-artifact:init-function-diagnostic-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:compiler-plugin-with-analyzer-generator-modifier')
    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-modifier')
    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-generator')
    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-analyzer')
    compilerPluginJar project(':project-api-test-artifact:pkg-provided-compiler-plugin-with-shared-data')

    testRuntimeOnly project(":ballerina-lang-test")
    balRt project(':ballerina-rt')
    testRt project(':testerina:testerina-runtime')
    testCore project(':testerina:testerina-core')
}

task createTestDistributionCache(type: Copy) {
    dependsOn configurations.distributionBala
    from configurations.distributionBala
    into "$buildDir/repo"
}

task createTestBre(type: Copy) {
    from configurations.balRt
    from configurations.testRt
    from configurations.testCore
    from configurations.distributionBirJar
    into "$buildDir/bre/lib"
}

task copyCompilerPluginJars(type: Copy) {
    from configurations.compilerPluginJar
    into "$buildDir/compiler-plugin-jars"
}

test {
    dependsOn ':ballerina-lang:build'
    dependsOn copyCompilerPluginJars
    dependsOn createTestDistributionCache
    dependsOn createTestBre

    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        finalizedBy jacocoTestReport
    }

    useTestNG() {
        suites 'src/test/resources/testng.xml'
        systemProperty("project.version", project.version)
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/all-test.exec")
    }
}

task jacocoMergeTest(type: JacocoReport) {
    dependsOn ':ballerina-lang:build'
    String langProjectBuildDir = project(":ballerina-lang").buildDir
    getExecutionData().setFrom(files("$buildDir/jacoco/test.exec", "$langProjectBuildDir/jacoco/test.exec"))
}

jacocoTestReport {
    afterEvaluate {
        String langProjectDir = project(":ballerina-lang").projectDir
        String langProjectBuildDir = project(":ballerina-lang").buildDir
        getClassDirectories().setFrom(files("$langProjectBuildDir/classes/java/main/io/ballerina/projects") as FileCollection)
        getSourceDirectories().setFrom(files("$langProjectDir/src/main/java") as FileCollection)
        getExecutionData().setFrom(files("$buildDir/jacoco/all-test.exec") as FileCollection)
    }

    dependsOn(jacocoMergeTest)
}

ext.moduleName = 'io.ballerina.projects.test'

description = 'Ballerina - Project API tests'
