/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'base'
}

apply from: "$rootDir/gradle/repositories.gradle"
apply from: "$rootDir/gradle/javaLibsProject.gradle"

configurations {
    dist {
      transitive false
    }
    distBal {
        transitive false
    }
    jar
    bir
    birJar
    bala
    bin
    balSource
    balxSource
    balDoc
    staticArtifacts
    staticFiles
    source
    sourceBalx
    doc
    zip
    resourceFiles
    balx
}

dependencies {
    dist project(':ballerina-rt')

    // Lang libs

//    balSource project(path: ':ballerina-transactions', configuration: 'balSource')

    // Lang Libs
    balSource project(path: ':ballerina-lang:internal', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:jballerina.java', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:annotations', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:array', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:decimal', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:error', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:floatingpoint', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:function', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:future', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:integer', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:map', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:object', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:stream', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:table', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:string', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:typedesc', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:value', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:xml', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:bool', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:runtime', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:query', configuration: 'balSource')
    balSource project(path: ':ballerina-lang:transaction', configuration: 'balSource')

    staticArtifacts files('COPYRIGHT', 'LICENSE', 'README.md')
}

task configured {
    configurations.distBal.allDependencies.withType(ProjectDependency) {
        def path = it.getDependencyProject().path
        dependencies.add("bir", dependencies.project(path: path, configuration: 'bir'))
        dependencies.add("birJar", dependencies.project(path: path, configuration: 'birJar'))
    }
}

def basePath = '/' + project.name + '-' + project.version

CopySpec copyJarSpec = copySpec {
    from configurations.dist
    into(basePath + '/bre/lib')
}

CopySpec copyBalaSpec = copySpec {
    from configurations.distBal
    into(basePath + '/lib')
}

CopySpec copyBalxSpec = copySpec {
    from configurations.balx
    into(basePath + '/lib/balx')
}

CopySpec copyBinSpec = copySpec {
    from ('bin')
    filter { line -> line.replace('${project.version}', "${project.version}") }
    into(basePath + '/bin')
}

CopySpec copyStaticSpec = copySpec {
    from configurations.staticArtifacts.files
    into(basePath + '/')
}

CopySpec copyResourceSpec = copySpec {
    from files('resources')
    into(basePath + '/bre')
}

//CopySpec copySrcBalaSpec = copySpec {
//    from configurations.balSource.files
//    into("$basePath/src")
//}


task createZip(type: Zip) {
    with copyJarSpec
    with copyBalaSpec
    with copyBinSpec
    with copyStaticSpec
    with copyResourceSpec
//    with copySrcBalaSpec
    with copyBalxSpec
}

artifacts {
    jar configurations.dist.files
//    bala configurations.distBal.files
//    source configurations.balSource.files
//    sourceBalx configurations.balxSource.files
    doc configurations.balDoc.files
    bin file('bin')
    staticFiles configurations.staticArtifacts.files
    resourceFiles file('resources')
    zip file: file("$buildDir/distributions/${basePath}.zip"), builtBy: createZip
}

build {
    dependsOn createZip
}

// This section makes sure that checkstyle/spotbug runs when dist is build.
project.afterEvaluate {
    configurations.dist.dependencies
        .findAll { it instanceof ProjectDependency }
        .each {
            it.dependencyProject.afterEvaluate {
                def dependencyCheck = it.tasks.find { it.name == 'check' }
                check.dependsOn dependencyCheck
            }
        }
}
