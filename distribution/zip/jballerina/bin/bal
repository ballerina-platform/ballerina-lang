#!/bin/bash
# ---------------------------------------------------------------------------
#  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# ----------------------------------------------------------------------------
# Startup Script for Ballerina
#
# Environment Variable Prerequisites
#
#   BALLERINA_HOME      (Optional) Home of Ballerina installation.
#
#   JAVA_HOME           Must point at your Java Development Kit installation.
#
#   JAVA_OPTS           (Optional) Java runtime options used when the commands
#                       is executed.
#
# NOTE: Borrowed generously from Apache Tomcat startup scripts.
# -----------------------------------------------------------------------------

# OS specific support.  $var _must_ be set to either true or false.

# Set JAVA_HOME for installers
JAVA_PATH=$BALLERINA_HOME/../../dependencies/jdk-11.0.8+10-jre
if test -d "$JAVA_PATH"; then
  JAVA_HOME=$JAVA_PATH
fi

#ulimit -n 100000
BASE_DIR=$PWD
cygwin=false;
darwin=false;
os400=false;
mingw=false;
case "`uname`" in
CYGWIN*) cygwin=true;;
MINGW*) mingw=true;;
OS400*) os400=true;;
Darwin*) darwin=true
        if [ -z "$JAVA_HOME" ] ; then
		   if [ -z "$JAVA_VERSION" ] ; then
			 JAVA_HOME=$(/usr/libexec/java_home)
           else
             echo "Using Java version: $JAVA_VERSION"
			 JAVA_HOME=$(/usr/libexec/java_home -v $JAVA_VERSION)
		   fi
	    fi
        ;;
esac

# resolve links - $0 may be a softlink
PRG="$0"

while [ -h "$PRG" ]; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done

# Get standard environment variables
PRGDIR=`dirname "$PRG"`

# set BALLERINA_HOME
BALLERINA_HOME=`cd "$PRGDIR/.." ; pwd`

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin; then
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$BALLERINA_HOME" ] && BALLERINA_HOME=`cygpath --unix "$BALLERINA_HOME"`
fi

# For OS400
if $os400; then
  # Set job priority to standard for interactive (interactive - 6) by using
  # the interactive priority - 6, the helper threads that respond to requests
  # will be running at the same priority as interactive jobs.
  COMMAND='chgjob job('$JOBNAME') runpty(6)'
  system $COMMAND

  # Enable multi threading
  QIBM_MULTI_THREADED=Y
  export QIBM_MULTI_THREADED
fi

if ! type "tput" > /dev/null 2>&1; then
  BALLERINA_CLI_WIDTH="80"
else
	if ! tput cols >/dev/null 2>&1; then
	    BALLERINA_CLI_WIDTH="80"
	else
	    BALLERINA_CLI_WIDTH=`tput cols`
	fi
fi
export BALLERINA_CLI_WIDTH

# For Migwn, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$BALLERINA_HOME" ] &&
    BALLERINA_HOME="`(cd "$BALLERINA_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
  # TODO classpath?
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD=java
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly."
  exit 1
fi

# if JAVA_HOME is not set we're not happy
if [ -z "$JAVA_HOME" ]; then
  echo "You must set the JAVA_HOME variable before running Ballerina."
  exit 1
fi

# ----- Process the input command ----------------------------------------------

if [ -n "${BAL_JAVA_DEBUG+set}" ]; then
    if [ -z "$BAL_JAVA_DEBUG" ]; then
        echo "Please specify the debug port for the BAL_JAVA_DEBUG variable"
        exit 1
    else
      if [ -n "$JAVA_OPTS" ]; then
        echo "Warning !!!. User specified JAVA_OPTS may interfere with BAL_JAVA_DEBUG"
      fi
      if [ -n "${BAL_DEBUG_OPTS+set}" ]; then
        JAVA_OPTS="$JAVA_OPTS $BAL_DEBUG_OPTS"
      else
        JAVA_OPTS="$JAVA_OPTS -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=$BAL_JAVA_DEBUG"
      fi
    fi
fi


BALLERINA_XBOOTCLASSPATH=""
for f in "$BALLERINA_HOME"/bre/lib/bootstrap/xboot/*.jar
do
    if [ "$f" != "$BALLERINA_HOME/bre/lib/bootstrap/xboot/*.jar" ];then
        BALLERINA_XBOOTCLASSPATH="$BALLERINA_XBOOTCLASSPATH":$f
    fi
done

BALLERINA_CLASSPATH="$CUSTOM_CLASSPATH"
if [ -e "$BALLERINA_HOME/bre/lib/bootstrap/tools.jar" ]; then
    BALLERINA_CLASSPATH="$JAVA_HOME/lib/tools.jar"
fi

for f in "$BALLERINA_HOME"/bre/lib/bootstrap/*.jar
do
    if [ "$f" != "$BALLERINA_HOME/bre/lib/bootstrap/*.jar" ];then
        BALLERINA_CLASSPATH="$BALLERINA_CLASSPATH":$f
    fi
done

for j in "$BALLERINA_HOME"/bre/lib/*.jar
do
    BALLERINA_CLASSPATH="$BALLERINA_CLASSPATH":$j
done

for j in "$BALLERINA_HOME"/lib/tools/lang-server/lib/*.jar
do
    BALLERINA_CLASSPATH="$BALLERINA_CLASSPATH":$j
done

for j in "$BALLERINA_HOME"/lib/tools/debug-adapter/lib/*.jar
do
    BALLERINA_CLASSPATH="$BALLERINA_CLASSPATH":$j
done

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  JAVA_HOME=`cygpath --absolute --windows "$JAVA_HOME"`
  BALLERINA_HOME=`cygpath --absolute --windows "$BALLERINA_HOME"`
  CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  BALLERINA_CLASSPATH=`cygpath --path --windows "$BALLERINA_CLASSPATH"`
  BALLERINA_XBOOTCLASSPATH=`cygpath --path --windows "$BALLERINA_XBOOTCLASSPATH"`
fi

# ----- Execute The Requested Command -----------------------------------------

#echo JAVA_HOME environment variable is set to $JAVA_HOME
#echo BALLERINA_HOME environment variable is set to $BALLERINA_HOME

#   cd "$BALLERINA_HOME"

# BALLERINA_CLASSPATH_EXT is for outsiders to additionally add
# classpath locations, e.g. AWS Lambda function libraries.
BALLERINA_CLASSPATH=$BALLERINA_CLASSPATH:$BALLERINA_CLASSPATH_EXT

CMD_LINE_ARGS="-Xbootclasspath/a:"$BALLERINA_XBOOTCLASSPATH" \
               -Xms256m -Xmx1024m \
               -XX:+HeapDumpOnOutOfMemoryError \
               -XX:HeapDumpPath="$(pwd)" \
               $JAVA_OPTS \
               -classpath "$BALLERINA_CLASSPATH" \
               -Dballerina.home="$BALLERINA_HOME" \
               -Dballerina.version=${project.version} \
               -Denable.nonblocking=false \
               -Djava.security.egd=file:/dev/./urandom \
               -Dfile.encoding=UTF8 \
               -Dballerina.target=jvm \
               -Djava.command=$JAVACMD"

if [[ $1 == "native-img" ]]; then
    if [[ ! -z "${GRAALVM_HOME}" ]]; then
        $GRAALVM_HOME/bin/java -cp "$BALLERINA_CLASSPATH" com.hpe.kraal.MainKt \
            --excludePackages="ballerina" \
            --excludeClasses="___init" $2 &&
        $GRAALVM_HOME/bin/native-image \
            -H:+PrintAOTCompilation \
            -H:+PrintClassInitialization \
            -H:+PrintFeatures \
            -H:+PrintStaticTruffleBoundaries \
            -H:+StackTrace \
            -H:+TraceLoggingFeature \
            -H:+ReportExceptionStackTraces \
            -J-Djava.util.concurrent.ForkJoinPool.common.parallelism=1 \
            -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\$BySpaceAndTime \
            -H:+AddAllCharsets \
            -H:EnableURLProtocols=http,https \
            -H:-UseServiceLoaderFeature \
            --initialize-at-build-time=org.h2.Driver \
            --enable-all-security-services \
            --allow-incomplete-classpath \
            --report-unsupported-elements-at-runtime \
            --no-fallback \
            --no-server \
            -cp "$BALLERINA_CLASSPATH" \
            -jar $2
    else
        echo "Please set GRAALVM_HOME for native image generation"
    fi

# handles "bal run <JAR_PATH>" command.
elif [[ $1 == "run" && $2 == *.jar ]]; then
      $JAVACMD \
        $CMD_LINE_ARGS \
        -jar "${@:2}"

# handles "bal run --debug=<PORT> <JAR_PATH>" command.
elif [[ $1 == "run" && $2 == --debug=* && $3 == *.jar ]]; then
      debugPort=$((echo $2) | cut -d "=" -f 2)
      # validates the port.
      if [[ $debugPort =~ ^[+]?([1-9][[:digit:]]*|0)$ && $debugPort -gt 0 ]]; then
          $JAVACMD \
            $CMD_LINE_ARGS \
            -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=$debugPort \
            -jar "${@:3}"
      else
         echo "Error: Invalid debug port number specified."
      fi

# handles "bal run --debug <PORT> <JAR_PATH>" command.
elif [[ $1 == "run" && $2 == "--debug" && $4 == *.jar ]]; then
      # validates the port.
      if [[ $3 =~ ^[+]?([1-9][[:digit:]]*|0)$ && $3 -gt 0 ]]; then
          $JAVACMD \
            $CMD_LINE_ARGS \
            -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=$3 \
            -jar "${@:4}"
      else
         echo "Error: Invalid debug port number specified."
      fi

else
    $JAVACMD \
      $CMD_LINE_ARGS \
      io.ballerina.cli.launcher.Main "$@"
fi
