/*
 *  Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com)
 *
 *  WSO2 LLC. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

apply from: "$rootDir/gradle/javaProject.gradle"
apply from: "$rootDir/gradle/ballerinaLangLibLoad.gradle"

configurations {
    compile.transitive = false
    compileClasspath.extendsFrom(compileOnly)
}

dependencies {
    compileOnly project(':ballerina-parser')
    compileOnly project(':ballerina-lang')
    compileOnly project(':formatter:formatter-core')
    compileOnly project(':language-server:language-server-commons')
    compileOnly (group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: "${project.eclipseLsp4jVersion}")

    implementation project(':ballerina-tools-api')
    implementation project(':identifier-util')
    implementation "org.apache.commons:commons-lang3:${project.apacheCommonsLang3Version}"
    implementation "org.javatuples:javatuples:${project.javaTuples}"

    testImplementation 'org.testng:testng'
    testImplementation project(':ballerina-lang')
    testImplementation project(':formatter:formatter-core')
    testImplementation project(':language-server:language-server-core')
    testImplementation "org.javatuples:javatuples:${project.javaTuples}"
    testImplementation (group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: "${project.eclipseLsp4jVersion}")
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

description = 'Module for converting XML to Ballerina Records Directly'

ext.moduleName = 'xml-to-record-converter'

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
