/*
 *  Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

apply from: "$rootDir/gradle/javaProject.gradle"

configurations {
    compile.transitive = false
    compileClasspath.extendsFrom(compileOnly)
}

dependencies {
    compileOnly project(':ballerina-parser')
    compileOnly project(':ballerina-lang')
    compileOnly project(':ballerina-tools-api')
    compileOnly project(':formatter:formatter-core')
    compileOnly project(':language-server:language-server-commons')
    compileOnly "com.fasterxml.jackson.core:jackson-databind"
    implementation ("io.swagger.parser.v3:swagger-parser-v2-converter") {
        exclude group: "io.swagger", module: "swagger-compat-spec-parser"
        exclude group: "org.slf4j", module: "slf4j-ext"
        exclude group: "javax.validation", module: "validation-api"
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation "com.google.guava:guava:${project.guavaVersion}"  // Required during runtime
    compileOnly (group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: "${project.eclipseLsp4jVersion}")

    testCompile 'org.testng:testng'
    testCompile project(':ballerina-parser')
    testCompile project(':formatter:formatter-core')
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

description = 'LS extension for converting JSON to Ballerina Record'

ext.moduleName = 'json-to-record-converter'

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    manifest {
        attributes "Main-Class": "io.ballerina.converters.JsonToRecordConverterService"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
