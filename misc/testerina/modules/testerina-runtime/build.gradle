/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProject.gradle"

configurations {
    dist {
        transitive false
    }
}

dependencies {
    implementation project(':ballerina-lang')
    implementation project(':ballerina-runtime')
    implementation project(':ballerina-tools-api')
    implementation project(':identifier-util')
    implementation 'com.google.code.gson:gson'
    implementation "com.google.code.gson:gson:${project.gsonVersion}"
    implementation "org.jacoco:org.jacoco.core:${project.jacocoVersion}"
    implementation "org.jacoco:org.jacoco.report:${project.jacocoVersion}"
    implementation "org.ow2.asm:asm:${project.ow2AsmVersion}"
    implementation "org.ow2.asm:asm-commons:${project.ow2AsmCommonsVersion}"
    implementation "org.ow2.asm:asm-tree:${project.ow2AsmTreeVersion}"

    compile group: 'org.jacoco', name: 'org.jacoco.core', version: "${project.jacocoVersion}"
    compile group: 'org.jacoco', name: 'org.jacoco.report', version: "${project.jacocoVersion}"
    compile group: 'org.ow2.asm', name: 'asm', version: "${project.ow2AsmVersion}"
    compile group: 'org.ow2.asm', name: 'asm-commons', version: "${project.ow2AsmCommonsVersion}"
    compile group: 'org.ow2.asm', name: 'asm-tree', version: "${project.ow2AsmTreeVersion}"

    jar {
        from {
            configurations.dist.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
}

description = 'Ballerina - Test Executer'

ext.moduleName = 'io.ballerina.testerina.runtime'

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}