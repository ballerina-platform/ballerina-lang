int=The `int` data type is a 64-bit two's complement integer. 
float=The `float` data type is a double-precision 64-bit IEEE 754 floating point.
boolean=The `boolean` data type has only two possible values of `true` and `false`. A variable of `boolean` type defaults to `true`.
string=The `string` data type is a series of characters gathered together. 
json=The `json` data type which represents the standard `JSON` format. It is a collection of `numbers`, `string`, `true`, `false`, `null`,  an `array` of `JSON`, or an `object` with key-value pairs where value is another `JSON`.
xml=The `xml` data type represents an immutable sequence of zero or more `XML` elements, comments, text or proccessing instructions.
any=The `any` data type represents all the available data types.
blob=The `blob` data type represents a sequence of bytes.
typedesc=The `typedesc` data type as a special type whose values are the types that are in the BVM.
record=The `record` data type represents a mutable mapping from keys, which are strings, to values; specifies maps in terms of names of fields (required keys) and value for each field.
array=The `array` data type represents a dynamic length, mutable list of values, where each member of the list is specified with the same type.
map=The `map` data type represents a mutable mapping from keys, which are strings, to values; specifies maps in terms of a single type to which all keys are mapped.
union=The `union` type which is defined as a set of given types, where at one given time, a value of that type can contain one of the given types.
tuple=The `tuple` data type represents a fixed length, immutable, list of values, where each member of the list has its own type.
table=The `table` data type consists of three main elments. The `primaryKeys` element defines the fields of the table that act as primary keys. The `indices` element defines the the fields of the table that are not primary keys. The `values` element defines array of records for the table.
stream=The `stream` data type allows publishing and subscribing, where functions introduced for each subscription to the stream (as function pointers) would be invoked for the events published to the stream.
future=The `future` data type represents an asynchronous function invocation, which can be used to read the return value of the asynchronous function or do control operations for the function execution, such as ``cancel``, ``isDone()`` and ``isCancelled()``.
function=The `function` data type function with 0 or more specified parameter types and a single return type.
