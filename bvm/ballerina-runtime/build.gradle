/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProject.gradle"

dependencies {
    implementation ('org.apache.ws.commons.axiom:axiom-impl') {
        exclude group: 'org.apache.ws.commons.axiom', module: 'axiom-api'
    }

    implementation ('org.apache.ws.commons.axiom:axiom-api') {
        exclude group: 'org.apache.geronimo.specs', module: 'geronimo-stax-api_1.0_spec'
        exclude group: 'jaxen', module: 'jaxen'
    }
    implementation 'org.apache.commons:commons-text'
    implementation 'io.opentelemetry:opentelemetry-api'
    implementation("com.atomikos:transactions-jta:${project.atomikosTransactionsJtaVersion}") {
        exclude group: 'org.hibernate', module: 'hibernate'
    }
    implementation "javax.transaction:javax.transaction-api:${project.javaxTransactionApiVersion}"
    implementation project(':toml-parser')
    implementation project(':ballerina-tools-api')
    implementation project(':identifier-util')

    testCompile 'org.testng:testng'
}


description = 'Ballerina - Runtime Core'

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }

    afterSuite { suite, result ->
        result.exception?.printStackTrace()
    }

    testLogging {
        // this will only change --warn flag behaviour
        warn {
            events = ["failed", "skipped"]
            exceptionFormat "full"
        }
    }
}

ext.moduleName = 'ballerina.runtime'

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
