{
  "position": {
    "line": 5,
    "character": 22
  },
  "source": "extract_to_function_exprs_let_expr_with_non_let_var_decls_referred.bal",
  "expected": [
    {
      "title": "Extract to function",
      "kind": "refactor.extract",
      "edits": [
        {
          "range": {
            "start": {
              "line": 7,
              "character": 1
            },
            "end": {
              "line": 7,
              "character": 1
            }
          },
          "newText": "\n\nfunction extracted(int moduleVar, int param, int localVar1) returns int {\n    return let int letVar1 = 1, int letVar2 = letVar1 + 1\n        in doSomething(letVar2) + moduleVar + CONST + localVar1 + param;\n}"
        },
        {
          "range": {
            "start": {
              "line": 5,
              "character": 20
            },
            "end": {
              "line": 6,
              "character": 71
            }
          },
          "newText": "extracted(moduleVar, param, localVar1)"
        }
      ],
      "resolvable": false
    }
  ],
  "description": "Extract to function for expressions, cursor inside the let keyword of unary let expression and the let expression's expression includes params, constants, local vars and module vars"
}
