{
  "position": {
    "line": 3,
    "character": 16
  },
  "source": "annotation_ctx/source/langAnnotations1.bal",
  "description": "",
  "items": [
    {
      "label": "int",
      "kind": "TypeParameter",
      "detail": "Int",
      "sortText": "N",
      "insertText": "int",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "byte",
      "kind": "TypeParameter",
      "detail": "Byte",
      "sortText": "N",
      "insertText": "byte",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "float",
      "kind": "TypeParameter",
      "detail": "Float",
      "sortText": "N",
      "insertText": "float",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "decimal",
      "kind": "TypeParameter",
      "detail": "Decimal",
      "sortText": "N",
      "insertText": "decimal",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "string",
      "kind": "TypeParameter",
      "detail": "String",
      "sortText": "N",
      "insertText": "string",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "boolean",
      "kind": "TypeParameter",
      "detail": "Boolean",
      "sortText": "N",
      "insertText": "boolean",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "xml",
      "kind": "TypeParameter",
      "detail": "Xml",
      "sortText": "N",
      "insertText": "xml",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "future",
      "kind": "TypeParameter",
      "detail": "Future",
      "sortText": "N",
      "insertText": "future",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "any",
      "kind": "TypeParameter",
      "detail": "Any",
      "sortText": "N",
      "insertText": "any",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "null",
      "kind": "TypeParameter",
      "detail": "Nil",
      "sortText": "N",
      "insertText": "null",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "never",
      "kind": "TypeParameter",
      "detail": "Never",
      "sortText": "N",
      "insertText": "never",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "handle",
      "kind": "TypeParameter",
      "detail": "Handle",
      "sortText": "N",
      "insertText": "handle",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "typedesc",
      "kind": "TypeParameter",
      "detail": "Typedesc",
      "sortText": "N",
      "insertText": "typedesc",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "readonly",
      "kind": "TypeParameter",
      "detail": "Readonly",
      "sortText": "N",
      "insertText": "readonly",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "stream",
      "kind": "TypeParameter",
      "detail": "Stream",
      "sortText": "N",
      "insertText": "stream",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "table",
      "kind": "TypeParameter",
      "detail": "Table",
      "sortText": "N",
      "insertText": "table",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "(any & readonly)",
      "kind": "TypeParameter",
      "detail": "Intersection",
      "sortText": "N",
      "insertText": "(any & readonly)",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Thread",
      "kind": "TypeParameter",
      "detail": "Union",
      "sortText": "N",
      "insertText": "Thread",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "StrandData",
      "kind": "Struct",
      "detail": "Record",
      "documentation": {
        "left": "Describes Strand execution details for the runtime.\n"
      },
      "sortText": "M",
      "insertText": "StrandData",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "error",
      "kind": "Event",
      "detail": "Error",
      "documentation": {
        "left": "Default error type.\nThe type parameter is for the error detail type. It's constrained to Cloneable type."
      },
      "sortText": "L",
      "insertText": "error",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "anydata",
      "kind": "TypeParameter",
      "detail": "Anydata",
      "documentation": {
        "left": "Denotes anydata type."
      },
      "sortText": "N",
      "insertText": "anydata",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "json",
      "kind": "TypeParameter",
      "detail": "Json",
      "documentation": {
        "left": "Denotes json type."
      },
      "sortText": "N",
      "insertText": "json",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "...()",
      "kind": "Function",
      "detail": "isolated object {public isolated function iterator() returns isolated object {public isolated function next() returns record {|int value;|}?;};}",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `isolated object {public isolated function iterator() returns isolated object {public isolated function next() returns record {|int value;|}?;};}`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "...",
      "insertText": "...()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "..<()",
      "kind": "Function",
      "detail": "isolated object {public isolated function iterator() returns isolated object {public isolated function next() returns record {|int value;|}?;};}",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `isolated object {public isolated function iterator() returns isolated object {public isolated function next() returns record {|int value;|}?;};}`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "..<",
      "insertText": "..<()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "+()",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `decimal`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "+",
      "insertText": "+()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "-()",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `decimal`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "-",
      "insertText": "-()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "/()",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `decimal`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "/",
      "insertText": "/()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "*()",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `decimal`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "*",
      "insertText": "*()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "%()",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `decimal`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "%",
      "insertText": "%()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "&()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `int`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "&",
      "insertText": "&()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "|()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `int`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "|",
      "insertText": "|()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "^()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `int`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "^",
      "insertText": "^()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "<<()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `int`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "<<",
      "insertText": "<<()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": ">>()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `int`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": ">>",
      "insertText": ">>()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": ">>>()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `int`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": ">>>",
      "insertText": ">>>()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "~()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `int`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "~",
      "insertText": "~()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "==()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "==",
      "insertText": "==()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "!=()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "!=",
      "insertText": "!=()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "equals()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "equals",
      "insertText": "equals()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "===()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "===",
      "insertText": "===()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "!==()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "!==",
      "insertText": "!==()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "<()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "<",
      "insertText": "<()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "<=()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "<=",
      "insertText": "<=()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": ">()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": ">",
      "insertText": ">()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": ">=()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": ">=",
      "insertText": ">=()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "&&()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "&&",
      "insertText": "&&()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "||()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "||",
      "insertText": "||()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "!()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.annotations:0.0.0_  \n  \n  \n  \n  \n**Return** `boolean`   \n  \n"
        }
      },
      "sortText": "A",
      "filterText": "!",
      "insertText": "!()",
      "insertTextFormat": "Snippet"
    }
  ]
}
