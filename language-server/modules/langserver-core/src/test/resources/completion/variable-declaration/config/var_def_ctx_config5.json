{
  "position": {
    "line": 3,
    "character": 17
  },
  "source": "variable-declaration/source/var_def_ctx_source5.bal",
  "items": [
    {
      "label": "MAX_VALUE",
      "kind": "Variable",
      "detail": "9223372036854775807",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Maximum value of type `int`."
        }
      },
      "sortText": "A",
      "insertText": "MAX_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MIN_VALUE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Minimum value of type `int`."
        }
      },
      "sortText": "A",
      "insertText": "MIN_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SIGNED32_MAX_VALUE",
      "kind": "Variable",
      "detail": "2147483647",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Maximum value of type `Signed32`."
        }
      },
      "sortText": "A",
      "insertText": "SIGNED32_MAX_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SIGNED32_MIN_VALUE",
      "kind": "Variable",
      "detail": "-2147483648",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Minimum value of type `Signed32`."
        }
      },
      "sortText": "A",
      "insertText": "SIGNED32_MIN_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SIGNED16_MAX_VALUE",
      "kind": "Variable",
      "detail": "32767",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Maximum value of type `Signed16`."
        }
      },
      "sortText": "A",
      "insertText": "SIGNED16_MAX_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SIGNED16_MIN_VALUE",
      "kind": "Variable",
      "detail": "-32768",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Minimum value of type `Signed16`."
        }
      },
      "sortText": "A",
      "insertText": "SIGNED16_MIN_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SIGNED8_MAX_VALUE",
      "kind": "Variable",
      "detail": "127",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Maximum value of type `Signed8`."
        }
      },
      "sortText": "A",
      "insertText": "SIGNED8_MAX_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SIGNED8_MIN_VALUE",
      "kind": "Variable",
      "detail": "-128",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Minimum value of type `Signed8`."
        }
      },
      "sortText": "A",
      "insertText": "SIGNED8_MIN_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UNSIGNED32_MAX_VALUE",
      "kind": "Variable",
      "detail": "4294967295",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Maximum value of type `Unsigned32`."
        }
      },
      "sortText": "A",
      "insertText": "UNSIGNED32_MAX_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UNSIGNED16_MAX_VALUE",
      "kind": "Variable",
      "detail": "65535",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Maximum value of type `Unsigned16`."
        }
      },
      "sortText": "A",
      "insertText": "UNSIGNED16_MAX_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UNSIGNED8_MAX_VALUE",
      "kind": "Variable",
      "detail": "255",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Maximum value of type `Unsigned8`."
        }
      },
      "sortText": "A",
      "insertText": "UNSIGNED8_MAX_VALUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Signed32",
      "kind": "TypeParameter",
      "detail": "Signed32",
      "sortText": "O",
      "insertText": "Signed32",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Signed16",
      "kind": "TypeParameter",
      "detail": "Signed16",
      "sortText": "O",
      "insertText": "Signed16",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Signed8",
      "kind": "TypeParameter",
      "detail": "Signed8",
      "sortText": "O",
      "insertText": "Signed8",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Unsigned32",
      "kind": "TypeParameter",
      "detail": "Unsigned32",
      "sortText": "O",
      "insertText": "Unsigned32",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Unsigned16",
      "kind": "TypeParameter",
      "detail": "Unsigned16",
      "sortText": "O",
      "insertText": "Unsigned16",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Unsigned8",
      "kind": "TypeParameter",
      "detail": "Unsigned8",
      "sortText": "O",
      "insertText": "Unsigned8",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "abs(int n)(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:1.1.0_  \n  \nReturns absolute value of an int.\n  \n**Params**  \n- `int` n: int value to be operated on  \n  \n**Returns** `int`   \n- absolute value of `n`  \n  \n"
        }
      },
      "sortText": "B",
      "filterText": "abs",
      "insertText": "abs(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sum(int... ns)(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:1.1.0_  \n  \nReturns sum of zero or more int values.\n  \n**Params**  \n- `int[]` ns: int values to sum  \n  \n**Returns** `int`   \n- sum of all the `ns`; 0 is `ns` is empty  \n  \n"
        }
      },
      "sortText": "B",
      "filterText": "sum",
      "insertText": "sum(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "max(int n, int... ns)(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:1.1.0_  \n  \nMaximum of one or more int values.\n  \n**Params**  \n- `int` n: first int value  \n- `int[]` ns: other int values  \n  \n**Returns** `int`   \n- maximum value of value of `x` and all the `xs`  \n  \n"
        }
      },
      "sortText": "B",
      "filterText": "max",
      "insertText": "max(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "min(int n, int... ns)(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:1.1.0_  \n  \nMinimum of one or more int values\n  \n**Params**  \n- `int` n: first int value  \n- `int[]` ns: other int values  \n  \n**Returns** `int`   \n- minimum value of `n` and all the `ns`  \n  \n"
        }
      },
      "sortText": "B",
      "filterText": "min",
      "insertText": "min(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromString(string s)(int|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:1.1.0_  \n  \nReturns the integer that `s` represents in decimal.\nReturns error if `s` is not the decimal representation of an integer.\nThe first character may be `+` or `-`.\nThis is the inverse of `value:toString` applied to an `int`.\n  \n**Params**  \n- `string` s: string representation of a integer value  \n  \n**Returns** `int|error`   \n- int representation of the argument or error  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "fromString",
      "insertText": "fromString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toHexString(int n)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:1.1.0_  \n  \nReturns representation of `n` as hexdecimal string.\nThere is no `0x` prefix. Lowercase letters a-f are used.\nNegative numbers will have a `-` prefix. No sign for\nnon-negative numbers.\n  \n**Params**  \n- `int` n: int value  \n  \n**Returns** `string`   \n- hexadecimal string representation of int value  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "toHexString",
      "insertText": "toHexString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromHexString(string s)(int|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:1.1.0_  \n  \nReturns the integer that `s` represents in hexadecimal.\nBoth uppercase A-F and lowercase a-f are allowed.\nIt may start with an optional `+` or `-` sign.\nNo `0x` or `0X` prefix is allowed.\nReturns an error if the `s` is not in an allowed format.\n  \n**Params**  \n- `string` s: hexadecimal string representation of int value  \n  \n**Returns** `int|error`   \n- int value or error  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "fromHexString",
      "insertText": "fromHexString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
