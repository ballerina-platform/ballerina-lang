{
  "position": {
    "line": 4,
    "character": 29
  },
  "source": "query_expression/source/query_expr_ctx_collect_clause_source2.bal",
  "description": "",
  "items": [
    {
      "label": "from",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "from",
      "insertText": "from ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "let",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "let",
      "insertText": "let",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ballerina/lang.test",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "test",
      "insertText": "test",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.test;\n"
        }
      ]
    },
    {
      "label": "ballerina/lang.array",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "array",
      "insertText": "array",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.array;\n"
        }
      ]
    },
    {
      "label": "ballerina/jballerina.java",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "java",
      "insertText": "java",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/jballerina.java;\n"
        }
      ]
    },
    {
      "label": "ballerina/lang.value",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "value",
      "insertText": "value",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.value;\n"
        }
      ]
    },
    {
      "label": "ballerina/module1",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "module1",
      "insertText": "module1",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/module1;\n"
        }
      ]
    },
    {
      "label": "ballerina/lang.runtime",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "runtime",
      "insertText": "runtime",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.runtime;\n"
        }
      ]
    },
    {
      "label": "map",
      "kind": "Unit",
      "detail": "type",
      "sortText": "R",
      "insertText": "map",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "object",
      "kind": "Unit",
      "detail": "type",
      "sortText": "R",
      "insertText": "object",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "stream",
      "kind": "Unit",
      "detail": "type",
      "sortText": "R",
      "insertText": "stream",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "table",
      "kind": "Unit",
      "detail": "type",
      "sortText": "R",
      "insertText": "table",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "transaction",
      "kind": "Unit",
      "detail": "type",
      "sortText": "R",
      "insertText": "transaction",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "service",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "service",
      "insertText": "service",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "new",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "new",
      "insertText": "new ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isolated",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "isolated",
      "insertText": "isolated ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "transactional",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "transactional",
      "insertText": "transactional",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "function",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "function",
      "insertText": "function ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "typeof",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "typeof",
      "insertText": "typeof ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "trap",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "trap",
      "insertText": "trap",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "client",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "client",
      "insertText": "client ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "true",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "true",
      "insertText": "true",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "false",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "false",
      "insertText": "false",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "null",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "null",
      "insertText": "null",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "check",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "check",
      "insertText": "check ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "checkpanic",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "checkpanic",
      "insertText": "checkpanic ",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "is",
      "kind": "Keyword",
      "detail": "Keyword",
      "sortText": "Q",
      "filterText": "is",
      "insertText": "is",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "error constructor",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "P",
      "filterText": "error",
      "insertText": "error(\"${1}\")",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "object constructor",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "P",
      "filterText": "object",
      "insertText": "object {${1}}",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "base16",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "P",
      "filterText": "base16",
      "insertText": "base16 `${1}`",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "base64",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "P",
      "filterText": "base64",
      "insertText": "base64 `${1}`",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "StrandData",
      "kind": "Struct",
      "detail": "Record",
      "documentation": {
        "left": "Describes Strand execution details for the runtime.\n"
      },
      "sortText": "M",
      "insertText": "StrandData",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Thread",
      "kind": "TypeParameter",
      "detail": "Union",
      "sortText": "N",
      "insertText": "Thread",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "test/project2",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "project2",
      "insertText": "project2",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import test/project2;\n"
        }
      ]
    },
    {
      "label": "test/project1",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "project1",
      "insertText": "project1",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import test/project1;\n"
        }
      ]
    },
    {
      "label": "test/local_project2",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "local_project2",
      "insertText": "local_project2",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import test/local_project2;\n"
        }
      ]
    },
    {
      "label": "test/local_project1",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "local_project1",
      "insertText": "local_project1",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import test/local_project1;\n"
        }
      ]
    },
    {
      "label": "ballerina/lang.regexp",
      "kind": "Module",
      "detail": "Module",
      "sortText": "R",
      "filterText": "regexp",
      "insertText": "regexp",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.regexp;\n"
        }
      ]
    },
    {
      "label": "re ``",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "P",
      "filterText": "re ``",
      "insertText": "re `${1}`",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "decimal",
      "kind": "TypeParameter",
      "detail": "Decimal",
      "sortText": "N",
      "insertText": "decimal",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "error",
      "kind": "Event",
      "detail": "Error",
      "sortText": "L",
      "insertText": "error",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "xml",
      "kind": "TypeParameter",
      "detail": "Xml",
      "sortText": "N",
      "insertText": "xml",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "boolean",
      "kind": "TypeParameter",
      "detail": "Boolean",
      "sortText": "N",
      "insertText": "boolean",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "future",
      "kind": "TypeParameter",
      "detail": "Future",
      "sortText": "N",
      "insertText": "future",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "int",
      "kind": "TypeParameter",
      "detail": "Int",
      "sortText": "N",
      "insertText": "int",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "float",
      "kind": "TypeParameter",
      "detail": "Float",
      "sortText": "N",
      "insertText": "float",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "function",
      "kind": "TypeParameter",
      "detail": "Function",
      "sortText": "N",
      "insertText": "function",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "string",
      "kind": "TypeParameter",
      "detail": "String",
      "sortText": "N",
      "insertText": "string",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "typedesc",
      "kind": "TypeParameter",
      "detail": "Typedesc",
      "sortText": "N",
      "insertText": "typedesc",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "readonly",
      "kind": "TypeParameter",
      "detail": "Readonly",
      "sortText": "N",
      "insertText": "readonly",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "handle",
      "kind": "TypeParameter",
      "detail": "Handle",
      "sortText": "N",
      "insertText": "handle",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "never",
      "kind": "TypeParameter",
      "detail": "Never",
      "sortText": "N",
      "insertText": "never",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "json",
      "kind": "TypeParameter",
      "detail": "Json",
      "sortText": "N",
      "insertText": "json",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "anydata",
      "kind": "TypeParameter",
      "detail": "Anydata",
      "sortText": "N",
      "insertText": "anydata",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "any",
      "kind": "TypeParameter",
      "detail": "Any",
      "sortText": "N",
      "insertText": "any",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "byte",
      "kind": "TypeParameter",
      "detail": "Byte",
      "sortText": "N",
      "insertText": "byte",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "string ``",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "P",
      "filterText": "string ``",
      "insertText": "string `${1}`",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "xml ``",
      "kind": "Snippet",
      "detail": "Snippet",
      "sortText": "P",
      "filterText": "xml ``",
      "insertText": "xml `${1}`",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "testIterableOperation()",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _._  \n  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "testIterableOperation",
      "insertText": "testIterableOperation()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "orders",
      "kind": "Variable",
      "detail": "[record {|string buyer; int price;|}, record {|string buyer; int price;|}, record {|string buyer; int price;|}, record {|string buyer; int price;|}]",
      "sortText": "B",
      "insertText": "orders",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "min(int... ns)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:0.0.0_  \n  \nReturns the minimum of one or more int values.\n\n```ballerina\nint:min(45, 25, 30, 75, 50) ⇒ 25\n[int, int, int, int] points = [21, 12, 48, 14];\nint:min(...points) ⇒ 12\nint m = 23;\nm.min(12, 43, 7, 19) ⇒ 7\n```\n  \n**Params**  \n- `int[]` ns: other int values  \n  \n**Return** `int`   \n- minimum value of parameter `n` and all of parameter `ns`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "min",
      "insertText": "min(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "max(int... ns)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:0.0.0_  \n  \nReturns the maximum of one or more int values.\n\n```ballerina\nint:max(50, 20, 30, 70, 65) ⇒ 70\n[int, int, int] scores = [52, 95, 76];\nint:max(...scores) ⇒ 95\nint n = 18;\nn.max(25, 30, 4, 15) ⇒ 30\n```\n  \n**Params**  \n- `int[]` ns: other int values  \n  \n**Return** `int`   \n- maximum value of value of parameter `n` and all of parameter `ns`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "max",
      "insertText": "max(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sum(int... ns)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:0.0.0_  \n  \nReturns sum of zero or more int values.\n\n```ballerina\nint:sum(10, 20, 30, 40) ⇒ 100\nint[] marks = [50, 65, 78, 95];\nint:sum(...marks) ⇒ 288\nint num = 24;\nnum.sum(38, 15, 97, 27) ⇒ 201\n```\n  \n  \n  \n**Return** `int`   \n- sum of all of parameter `ns`; 0 if parameter `ns` is empty  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "sum",
      "insertText": "sum(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "min(decimal... xs)",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.decimal:0.0.0_  \n  \nReturns the minimum of one or more decimal values.\n\n```ballerina\ndecimal:min(5.2, 2.3, 3.4) ⇒ 2.3\ndecimal[] marks = [90.3, 80.5, 98, 92.3];\ndecimal:min(82.1, ...marks) ⇒ 80.5\n[decimal, decimal, decimal] scores = [7.21, 10.32, 9.2];\ndecimal:min(...scores) ⇒ 7.21\ndecimal d = 1.2;\nd.min(10.5, 21, 32.4) ⇒ 1.2\n```\n  \n**Params**  \n- `decimal[]` xs: other decimal values  \n  \n**Return** `decimal`   \n- minimum value of parameter `x` and all the parameter `xs`.  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "min",
      "insertText": "min(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "max(decimal... xs)",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.decimal:0.0.0_  \n  \nReturns the maximum of one or more decimal values.\n\n```ballerina\ndecimal:max(1.2, 12.3, 3.4) ⇒ 12.3\ndecimal[] marks = [70.3, 80.5, 98.1, 92.3];\ndecimal:max(30.5, ...marks) ⇒ 98.1\n[decimal, decimal, decimal] scores = [7.21, 10.32, 9.2];\ndecimal:max(...scores) ⇒ 10.32\ndecimal d = 21.2;\nd.max(40.5, 21, 32.4) ⇒ 40.5\n```\n  \n**Params**  \n- `decimal[]` xs: other decimal values  \n  \n**Return** `decimal`   \n- maximum value of parameter `x` and all the parameter `xs`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "max",
      "insertText": "max(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sum(decimal... xs)",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.decimal:0.0.0_  \n  \nReturns the sum of zero or more decimal values.\n\n```ballerina\ndecimal:sum(1.2, 2.3, 3.4) ⇒ 6.9\ndecimal[] scores = [11.1, 22.2, 33.3];\ndecimal:sum(...scores) ⇒ 66.6\n[decimal, decimal, decimal] marks = [7.21, 10.32, 9.2];\ndecimal:sum(...marks) ⇒ 26.73\ndecimal d = 21.2;\nd.sum(10.5, 21, 32.4) ⇒ 85.1\n```\n  \n  \n  \n**Return** `decimal`   \n- sum of all the parameter `xs`; 0 if parameter `xs` is empty  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "sum",
      "insertText": "sum(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sum(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the sum of zero or more float values.\n\nResult is NaN if any arg is NaN\n\n```ballerina\nfloat:sum(1.2, 2.3, 3.4) ⇒ 6.9\nfloat[] scores = [11.1, 22.2, 33.3];\nfloat:sum(...scores) ⇒ 66.6\nfloat f = 21.2;\nf.sum(10.5, 21, 32.4) ⇒ 85.1\nfloat:sum(float:NaN, 2.3, 3.4) ⇒ NaN\n```\n  \n  \n  \n**Return** `float`   \n- sum of all of parameter `xs`, +0.0 if parameter `xs` is empty  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "sum",
      "insertText": "sum(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "min(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the minimum of zero or more float values.\n\nResult is +∞ if no args\nResult is NaN if any arg is NaN\n\n```ballerina\nfloat:min(5.2, 2.3, 3.4) ⇒ 2.3\nfloat[] marks = [90.3, 80.5, 98, 92.3];\nfloat:min(...marks) ⇒ 80.5\nfloat f = 1.2;\nf.min(10.5, 21, 32.4) ⇒ 1.2\nfloat:min() ⇒ Infinity\nfloat:min(5.2, float:NaN, 3.4) ⇒ NaN\n```\n  \n  \n  \n**Return** `float`   \n- minimum value of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "min",
      "insertText": "min(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "max(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the maximum of zero or more float values.\n\nResult is -∞ if no args\nNaN if any arg is NaN\n\n```ballerina\nfloat:max(1.2, 12.3, 3.4) ⇒ 12.3\nfloat[] marks = [70.3, 80.5, 98.1, 92.3];\nfloat:max(...marks) ⇒ 98.1\nfloat f = 21.2;\nf.max(40.5, 21, 32.4) ⇒ 40.5\nfloat:max() ⇒ -Infinity\nfloat:max(1.2, float:NaN, 3.4) ⇒ NaN\n```\n  \n  \n  \n**Return** `float`   \n- maximum value of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "max",
      "insertText": "max(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "'join(string... strs)",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string:0.0.0_  \n  \nJoins zero or more strings together with a separator.\n\n```ballerina\nstring:'join(\" \", \"Ballerina\", \"is\", \"a\", \"programming\", \"language\") ⇒ Ballerina is a programming language\nstring[] array = [\"John\", \"23\", \"USA\", \"Computer Science\", \"Swimmer\"];\nstring:'join(\",\", ...array) ⇒ John,23,USA,Computer Science,Swimmer\n```\n  \n**Params**  \n- `string[]` strs: strings to be joined  \n  \n**Return** `string`   \n- a string consisting of all of parameter `strs` concatenated in order  \nwith parameter `separator` in between them  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "'join",
      "insertText": "'join(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "concat(string... strs)",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.string:0.0.0_  \n  \nConcatenates zero or more strings.\n\n```ballerina\n\"http://worldtimeapi.org\".concat(\"/api/timezone/\", \"Asia\", \"/\", \"Colombo\") ⇒ http://worldtimeapi.org/api/timezone/Asia/Colombo\n// Alternative approach to achieve the same.\nstring:concat(\"http://worldtimeapi.org\", \"/api/timezone/\", \"Asia\", \"/\", \"Colombo\") ⇒ http://worldtimeapi.org/api/timezone/Asia/Colombo\n```\n  \n  \n  \n**Return** `string`   \n- concatenation of all of the parameter `strs`; empty string if parameter `strs` is empty  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "concat",
      "insertText": "concat(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "some(boolean... bs)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.boolean:0.0.0_  \n  \nReturns true if one or more of its arguments are true and false otherwise.\nIn particular, it returns false if there are no arguments.\n\n```ballerina\nboolean:some(true, false) ⇒ true\nboolean:some(false, false) ⇒ false\nboolean:some() ⇒ false\n```\n  \n  \n  \n**Return** `boolean`   \n- true if one or more of its arguments are true and false otherwise  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "some",
      "insertText": "some(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "every(boolean... bs)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.boolean:0.0.0_  \n  \nReturns true if all of its arguments are true and false otherwise.\nIn particular, it returns true if there are no arguments.\n\n```ballerina\nboolean:every(true, false) ⇒ false\nboolean:every(true, true) ⇒ true\nboolean:every() ⇒ true    \n```\n  \n  \n  \n**Return** `boolean`   \n- true if all of its arguments are true and false otherwise  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "every",
      "insertText": "every(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "avg(int... ns)",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.int:0.0.0_  \n  \nReturns the average of its arguments.\n\n```ballerina\nint:avg(10, 20, 30, 40) ⇒ 25.0\n```\n  \n**Params**  \n- `int[]` ns: other int values  \n  \n**Return** `decimal`   \n- average of parameter `n` and all of parameter `ns`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "avg",
      "insertText": "avg(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "avg(decimal... xs)",
      "kind": "Function",
      "detail": "decimal",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.decimal:0.0.0_  \n  \nReturns the average of its arguments.\n\n```ballerina\ndecimal:avg(10, 20, 30, 40) ⇒ 25.0\n```\n  \n**Params**  \n- `decimal[]` xs: other decimal values  \n  \n**Return** `decimal`   \n- average of parameter `x` and all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "avg",
      "insertText": "avg(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "avg(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the average of its arguments.\nReturn NaN if there are no arguments,\n\n```ballerina\nfloat:avg(2, 2) ⇒ 2.0\n```\n  \n  \n  \n**Return** `float`   \n- average of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "avg",
      "insertText": "avg(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "price",
      "kind": "Variable",
      "detail": "int",
      "sortText": "B",
      "insertText": "price",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "last(value:Type... vs)",
      "kind": "Function",
      "detail": "value:Type",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the last argument.\n\n```ballerina\nvalue:last(1, 2, 3) ⇒ 3\n```\n  \n**Params**  \n- `value:Type[]` vs: rest of the arguments  \n  \n**Return** `value:Type`   \n- last argument  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "last",
      "insertText": "last(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "count(any|error... vs)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the number of arguments.\n\n```ballerina\nvalue:count(1, 2, 3) ⇒ 3\n```\n  \n  \n  \n**Return** `int`   \n- number of arguments  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "count",
      "insertText": "count(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "first(any|error... vs)",
      "kind": "Function",
      "detail": "value:Type",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the first argument.\n\n```ballerina\nvalue:first(1, 2, 3) ⇒ 1\n```\n  \n**Params**  \n- `(any|error)[]` vs: rest of the arguments  \n  \n**Return** `value:Type`   \n- first argument  \n  \n"
        }
      },
      "sortText": "C",
      "filterText": "first",
      "insertText": "first(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
