{
  "position": {
    "line": 12,
    "character": 26
  },
  "source": "expression_context/source/field_access_ctx_source23.bal",
  "items": [
    {
      "label": "foreach",
      "kind": "Snippet",
      "detail": "foreach var item in expr",
      "documentation": {
        "left": "foreach statement for iterable variable - self.routingTable"
      },
      "sortText": "Q",
      "insertText": "foreach NodeCredential item in self.routingTable {\n\t${1}\n}",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 12,
              "character": 8
            },
            "end": {
              "line": 12,
              "character": 26
            }
          },
          "newText": ""
        }
      ]
    },
    {
      "label": "foreach i",
      "kind": "Snippet",
      "detail": "foreach int i in 0...expr",
      "documentation": {
        "left": "foreach i statement for iterable variable - self.routingTable"
      },
      "sortText": "Q",
      "insertText": "foreach int i in ${1:0}...self.routingTable.length() {\n\t${2}\n}",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 12,
              "character": 8
            },
            "end": {
              "line": 12,
              "character": 26
            }
          },
          "newText": ""
        }
      ]
    },
    {
      "label": "reduce(function () func, any|error initial)(any|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nCombines the members of an array using a combining function.\nThe combining function takes the combined value so far and a member of the array,\nand returns a new combined value.\n\n```\n# reduce([1, 2, 3], function (int total, int n) returns int { return total + n; }, 0)\n# ```  \n**Params**  \n- `function ()` func: combining function  \n- `any|error` initial: initial value for the first argument of combining parameter `func`  \n  \n**Returns** `any|error`   \n- result of combining the members of `arr` using `func`  \n  \nFor example  \nis the same as `sum(1, 2, 3)`.  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "reduce",
      "insertText": "reduce(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "forEach(function () func)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nApplies a function to each member of an array.\nThe parameter `func` is applied to each member of array `arr` in order.\n  \n**Params**  \n- `function ()` func: a function to apply to each member"
        }
      },
      "sortText": "D",
      "filterText": "forEach",
      "insertText": "forEach(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "shift()(any|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nRemoves and returns first member of an array.\nThe array must not be empty.\n  \n  \n  \n**Returns** `any|error`   \n- the value that was the first member of the array  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "shift",
      "insertText": "shift()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "length()(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReturns the number of members of an array.\n  \n  \n  \n**Returns** `int`   \n- number of members in `arr`  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "length",
      "insertText": "length()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "sort(array:SortDirection direction, function ()? key)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nSorts an array.\nIf the member type of the array is not sorted, then the `key` function\nmust be specified.\nSorting works the same as with the `sort` clause of query expressions.\n  \n**Params**  \n- `array:SortDirection` direction: direction in which to sort(Defaultable)  \n- `function ()?` key: function that returns a key to use to sort the members(Defaultable)  \n  \n**Returns** `(any|error)[]`   \n- a new array consisting of the members of `arr` in sorted order  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "sort",
      "insertText": "sort(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "reverse()((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReverses the order of the members of an array.\n  \n  \n  \n**Returns** `(any|error)[]`   \n- `arr` with its members in reverse order  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "reverse",
      "insertText": "reverse()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toStream()(stream<any|error>)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReturns a stream from the given array.\n  \n  \n  \n**Returns** `stream<any|error>`   \n- The stream representation of the array `arr`  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "toStream",
      "insertText": "toStream()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "remove(int index)(any|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nRemoves a member of an array.\n  \n**Params**  \n- `int` index: index of member to be removed from `arr`  \n  \n**Returns** `any|error`   \n- the member of `arr` that was at `index`  \nThis removes the member of `arr` with index `index` and returns it.  \nIt panics if there is no such member.  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "remove",
      "insertText": "remove(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "push(any|error... vals)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nAdds values to the end of an array.\n  \n**Params**  \n- `(any|error)[]` vals: values to add to the end of the array"
        }
      },
      "sortText": "D",
      "filterText": "push",
      "insertText": "push(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "filter(function () func)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nSelects the members from an array for which a function returns true.\n  \n**Params**  \n- `function ()` func: a predicate to apply to each member to test whether it should be selected  \n  \n**Returns** `(any|error)[]`   \n- new array only containing members of `arr` for which `func` evaluates to true  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "filter",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "pop()(any|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nRemoves and returns the last member of an array.\nThe array must not be empty.\n  \n  \n  \n**Returns** `any|error`   \n- removed member  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "pop",
      "insertText": "pop()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "lastIndexOf(anydata val, int startIndex)(int?)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReturns the index of last member of `arr` that is equal to `val` if there is one.\nReturns `()` if not found.\nEquality is tested using `==`.\n  \n**Params**  \n- `anydata` val: member to search for  \n- `int` startIndex: index to start searching backwards from(Defaultable)  \n  \n**Returns** `int?`   \n- index of the member if found, else `()`  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "lastIndexOf",
      "insertText": "lastIndexOf(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator()(object {public isolated function next() returns record {| any|error value; |}? ;})",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReturns an iterator over an array.\n  \n  \n  \n**Returns** `object {public isolated function next() returns record {| any|error value; |}? ;}`   \n- a new iterator object that will iterate over the members of `arr`.  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "iterator",
      "insertText": "iterator()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "removeAll()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nRemoves all members of an array.  \n"
        }
      },
      "sortText": "D",
      "filterText": "removeAll",
      "insertText": "removeAll()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setLength(int length)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nChanges the length of an array.\n  \n**Params**  \n- `int` length: new length\n`setLength(arr, 0)` is equivalent to `removeAll(arr)`."
        }
      },
      "sortText": "D",
      "filterText": "setLength",
      "insertText": "setLength(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "slice(int startIndex, int endIndex)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReturns a subarray starting from `startIndex` (inclusive) to `endIndex` (exclusive).\n  \n**Params**  \n- `int` startIndex: index of first member to include in the slice  \n- `int` endIndex: index of first member not to include in the slice(Defaultable)  \n  \n**Returns** `(any|error)[]`   \n- array slice within specified range  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "slice",
      "insertText": "slice(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "enumerate()([int, any|error][])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReturns a new array consisting of index and member pairs.\n  \n  \n  \n**Returns** `[int, any|error][]`   \n- array of index, member pairs  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "enumerate",
      "insertText": "enumerate()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "unshift(any|error... vals)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nAdds values to the start of an array.\nThe values newly added to the array will be in the same order\nas they are in `vals`.\n  \n**Params**  \n- `(any|error)[]` vals: values to add to the start of the array"
        }
      },
      "sortText": "D",
      "filterText": "unshift",
      "insertText": "unshift(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "map(function () func)((any|error)[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nApplies a function to each member of an array and returns an array of the results.\n  \n**Params**  \n- `function ()` func: a function to apply to each member  \n  \n**Returns** `(any|error)[]`   \n- new array containing result of applying `func` to each member of `arr` in order  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "map",
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "indexOf(anydata val, int startIndex)(int?)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:1.1.0_  \n  \nReturns the index of first member of `arr` that is equal to `val` if there is one.\nReturns `()` if not found.\nEquality is tested using `==`.\n  \n**Params**  \n- `anydata` val: member to search for  \n- `int` startIndex: index to start the search from(Defaultable)  \n  \n**Returns** `int?`   \n- index of the member if found, else `()`  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "indexOf",
      "insertText": "indexOf(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneWithType(typedesc<anydata> t)(t|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConstructs a value with a specified type by cloning another value.  \n**Params**  \n- `typedesc<anydata>` t: the type for the cloned to be constructed(Defaultable)  \n  \n**Returns** `t|error`   \n- a new value that belongs to type `t`, or an error if this cannot be done  \n  \nWhen `v` is a structural value, the inherent type of the value to be constructed  \ncomes from `t`. When `t` is a union, it must be possible to determine which  \nmember of the union to use for the inherent type by following the same rules  \nthat are used by list constructor expressions and mapping constructor expressions  \nwith the contextually expected type. If not, then an error is returned.  \nThe `cloneWithType` operation is recursively applied to each member of `v` using  \nthe type descriptor that the inherent type requires for that member.  \n  \nLike the Clone abstract operation, this does a deep copy, but differs in  \nthe following respects:  \n- the inherent type of any structural values constructed comes from the specified  \ntype descriptor rather than the value being constructed  \n- the read-only bit of values and fields comes from the specified type descriptor  \n- the graph structure of `v` is not preserved; the result will always be a tree;  \nan error will be returned if `v` has cycles  \n- immutable structural values are copied rather being returned as is; all  \nstructural values in the result will be mutable.  \n- numeric values can be converted using the NumericConvert abstract operation  \n- if a record type descriptor specifies default values, these will be used  \nto supply any missing members  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "cloneWithType",
      "insertText": "cloneWithType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneReadOnly()(CloneableType & readonly)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nReturns a clone of `v` that is read-only, i.e. immutable.\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Returns** `CloneableType & readonly`   \n- immutable clone of `v`  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "cloneReadOnly",
      "insertText": "cloneReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toBalString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConverts a value to a string that describes the value in Ballerina syntax.  \n  \n  \n**Returns** `string`   \n- a string resulting from the conversion  \n  \nIf `v` is anydata and does not have cycles, then the result will  \nconform to the grammar for a Ballerina expression and when evaluated  \nwill result in a value that is == to v.  \n  \nThe details of the conversion are specified by the ToString abstract operation  \ndefined in the Ballerina Language Specification, using the expression style.  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "toBalString",
      "insertText": "toBalString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJson()(json)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConverts a value of type `anydata` to `json`.\nThis does a deep copy of `v` converting values that do\nnot belong to json into values that do.\nA value of type `xml` is converted into a string as if\nby the `toString` function.\nA value of type `table` is converted into a list of\nmappings one for each row.\nThe inherent type of arrays in the return value will be\n`json[]` and of mappings will be `map<json>`.\nA new copy is made of all structural values, including\nimmutable values.\n  \n  \n  \n**Returns** `json`   \n- representation of `v` as value of type json  \nThis panics if `v` has cycles.  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "toJson",
      "insertText": "toJson()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isReadOnly()(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nTests whether `v` is read-only, i.e. immutable\nReturns true if read-only, false otherwise.\n  \n  \n  \n**Returns** `boolean`   \n- true if read-only, false otherwise  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "isReadOnly",
      "insertText": "isReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "fromJsonWithType(typedesc<anydata> t)(t|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nConverts a value of type json to a user-specified type.\nThis works the same as `cloneWithType`,\nexcept that it also does the inverse of the conversions done by `toJson`.\n  \n**Params**  \n- `typedesc<anydata>` t: type to convert to(Defaultable)  \n  \n**Returns** `t|error`   \n- value belonging to type `t` or error if this cannot be done  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "fromJsonWithType",
      "insertText": "fromJsonWithType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "mergeJson(json j2)(json|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nMerges two json values.\n  \n**Params**  \n- `json` j2: json value  \n  \n**Returns** `json|error`   \n- the merge of `j1` with `j2` or an error if the merge fails  \n  \nThe merge of `j1` with `j2` is defined as follows:  \n- if `j1` is `()`, then the result is `j2`  \n- if `j2` is `()`, then the result is `j1`  \n- if `j1` is a mapping and `j2` is a mapping, then for each entry [k, j] in j2,  \nset `j1[k]` to the merge of `j1[k]` with `j`  \n- if `j1[k]` is undefined, then set `j1[k]` to `j`  \n- if any merge fails, then the merge of `j1` with `j2` fails  \n- otherwise, the result is `j1`.  \n- otherwise, the merge fails  \nIf the merge fails, then `j1` is unchanged.  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "mergeJson",
      "insertText": "mergeJson(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "clone()(CloneableType)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nReturns a clone of `v`.\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Returns** `CloneableType`   \n- clone of `v`  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "clone",
      "insertText": "clone()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ensureType(typedesc<any> t)(t|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nSafely casts a value to a type.\nThis casts a value to a type in the same way as a type cast expression,\nbut returns an error if the cast cannot be done, rather than panicking.  \n**Params**  \n- `typedesc<any>` t: a typedesc for the type to which to cast it\nreturn - `v` cast to the type described by `t`, or an error, if the cast cannot be done(Defaultable)  \n  \n**Returns** `t|error`   \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "ensureType",
      "insertText": "ensureType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nPerforms a direct conversion of a value to a string.\nThe conversion is direct in the sense that when applied to a value that is already\na string it leaves the value unchanged.\n  \n  \n  \n**Returns** `string`   \n- a string resulting from the conversion  \n  \nThe details of the conversion are specified by the ToString abstract operation  \ndefined in the Ballerina Language Specification, using the direct style.  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "toString",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJsonString()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:1.0.0_  \n  \nReturns the string that represents `v` in JSON format.\n`v` is first converted to `json` as if by the `toJson` function.\n  \n  \n  \n**Returns** `string`   \n- string representation of `v` converted to `json`  \n  \n"
        }
      },
      "sortText": "D",
      "filterText": "toJsonString",
      "insertText": "toJsonString()",
      "insertTextFormat": "Snippet"
    }
  ]
}
