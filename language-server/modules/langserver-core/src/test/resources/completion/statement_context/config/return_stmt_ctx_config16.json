{
  "position": {
    "line": 2,
    "character": 17
  },
  "source": "statement_context/source/return_stmt_ctx_source16.bal",
  "items": [
    {
      "label": "PI",
      "kind": "Variable",
      "detail": "3.141592653589793",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The number π."
        }
      },
      "sortText": "AC",
      "insertText": "PI",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "E",
      "kind": "Variable",
      "detail": "2.718281828459045",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Euler's number."
        }
      },
      "sortText": "AC",
      "insertText": "E",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "NaN",
      "kind": "Variable",
      "detail": "NaN",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "IEEE not-a-number value."
        }
      },
      "sortText": "AC",
      "insertText": "NaN",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Infinity",
      "kind": "Variable",
      "detail": "Infinity",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "IEEE positive infinity."
        }
      },
      "sortText": "AC",
      "insertText": "Infinity",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isFinite(float x)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nTests whether a float is finite.\n\nExactly one of isFinite, isInfinite and IsNaN will be true for any float value\n  \n**Params**  \n- `float` x: the float to be tested  \n  \n**Return** `boolean`   \n- true if parameter `x` is finite, i.e., neither NaN nor +∞ nor -∞  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "isFinite",
      "insertText": "isFinite(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "isInfinite(float x)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nTests whether a float is infinite.\n\nExactly one of isFinite, isInfinite and IsNaN will be true for any float value\n  \n**Params**  \n- `float` x: the float to be tested  \n  \n**Return** `boolean`   \n- true if parameter `x` is either +∞ or -∞  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "isInfinite",
      "insertText": "isInfinite(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "isNaN(float x)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nTests whether a float is NaN.\n\nExactly one of isFinite, isInfinite and IsNaN will be true for any float value.\n  \n**Params**  \n- `float` x: the float to be tested  \n  \n**Return** `boolean`   \n- true if parameter `x` is NaN  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "isNaN",
      "insertText": "isNaN(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sum(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the sum of zero or more float values.\n\nResult is NaN if any arg is NaN\n  \n**Params**  \n- `float[]` xs: float values to sum  \n  \n**Return** `float`   \n- sum of all of parameter `xs`, +0.0 if parameter `xs` is empty  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sum",
      "insertText": "sum(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "max(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the maximum of zero or more float values.\n\nResult is -∞ if no args\nNaN if any arg is NaN\n  \n**Params**  \n- `float[]` xs: float values to operate on  \n  \n**Return** `float`   \n- maximum value of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "max",
      "insertText": "max(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "min(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the minimum of zero or more float values.\n\nResult is +∞ if no args\nResult is NaN if any arg is NaN\n  \n**Params**  \n- `float[]` xs: float values to operate on  \n  \n**Return** `float`   \n- minimum value of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "min",
      "insertText": "min(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "abs(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the IEEE absolute value of a float value.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- absolute value of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "abs",
      "insertText": "abs(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "round(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRounds a float value to the closest integral value.\n\nReturns the float value that is a mathematical integer and closest to parameter `x`.\nIf there are two such values, choose the one that is even\n(this is the round-to-nearest rounding mode, which is the default for IEEE and for Ballerina).\nSame as Java Math.rint method\nSame as .NET Math.Round method\nIEEE roundToIntegralTiesToEven operation\nNote that `<int>x` is the same as `<int>x.round()`\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- closest float value to parameter `x` that is a mathematical integer  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "round",
      "insertText": "round(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "floor(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRounds a float down to the closest integral value.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- largest (closest to +∞) float value not greater than parameter `x` that is a mathematical integer  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "floor",
      "insertText": "floor(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "ceiling(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRounds a float up to the closest integral value.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- smallest (closest to -∞) decimal value not less than parameter `x` that is a mathematical integer  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "ceiling",
      "insertText": "ceiling(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sqrt(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the square root of a float value.\n\nCorresponds to IEEE squareRoot operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- square root of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sqrt",
      "insertText": "sqrt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cbrt(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the cube root of a float value.\n\nCorresponds to IEEE rootn(x, 3) operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- cube root of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "cbrt",
      "insertText": "cbrt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "pow(float x, float y)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRaises one float value to the power of another float values.\n\nCorresponds to IEEE pow(x, y) operation.\n  \n**Params**  \n- `float` x: base value  \n- `float` y: the exponent  \n  \n**Return** `float`   \n- `x` raised to the power of parameter `y`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "pow",
      "insertText": "pow(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "log(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the natural logarithm of a float value.\n\nCorresponds to IEEE log operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- natural logarithm of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "log",
      "insertText": "log(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "log10(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the base 10 logarithm of a float value.\n\nCorresponds to IEEE log10 operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- base 10 logarithm of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "log10",
      "insertText": "log10(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "exp(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRaises Euler's number to a power.\n\nCorresponds to IEEE exp operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- Euler's number raised to the power parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "exp",
      "insertText": "exp(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sin(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the sine of a float value.\n\nCorresponds to IEEE sin operation.\n  \n**Params**  \n- `float` x: float value, specifying an angle in radians  \n  \n**Return** `float`   \n- the sine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sin",
      "insertText": "sin(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cos(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the cosine of a float value.\n\nCorresponds to IEEE cos operation.\n  \n**Params**  \n- `float` x: float value, specifying an angle in radians  \n  \n**Return** `float`   \n- the cosine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "cos",
      "insertText": "cos(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "tan(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the tangent of a float value.\n\nCorresponds to IEEE tan operation\n  \n**Params**  \n- `float` x: float value, specifying an angle in radians  \n  \n**Return** `float`   \n- the tangent of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "tan",
      "insertText": "tan(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "acos(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the arccosine of a float value.\n\nCorresponds to IEEE acos operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- the arccosine of parameter `x` in radians  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "acos",
      "insertText": "acos(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "atan(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the arctangent of a float value.\n\nCorresponds to IEEE atan operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- the arctangent of parameter `x` in radians  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "atan",
      "insertText": "atan(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "asin(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the arcsine of a float value.\n\nCorresponds to IEEE asin operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- the arcsine of parameter `x` in radians  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "asin",
      "insertText": "asin(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "atan2(float y, float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nPerforms the 2-argument arctangent operation.\n\nCorresponds IEEE atan2(y, x) operation.\n  \n**Params**  \n- `float` y: the y-coordinate  \n- `float` x: the x-coordinate  \n  \n**Return** `float`   \n- the angle in radians from the positive x-axis to the point  \nwhose Cartesian coordinates are `(x, y)`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "atan2",
      "insertText": "atan2(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sinh(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the hyperbolic sine of a float value.\n\nCorresponds to IEEE sinh operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- hyperbolic sine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sinh",
      "insertText": "sinh(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cosh(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the hyperbolic cosine of a float value.\n\nCorresponds to IEEE cosh operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- hyperbolic cosine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "cosh",
      "insertText": "cosh(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "tanh(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the hyperbolic tangent of a float value.\n\nCorresponds to IEEE tanh operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- hyperbolic tangent of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "tanh",
      "insertText": "tanh(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromString(string s)",
      "kind": "Function",
      "detail": "float|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the float value represented by a string.\n\nparameter `s` must follow the syntax of DecimalFloatingPointNumber as defined by the Ballerina specification\nwith the following modifications\n- the DecimalFloatingPointNumber may have a leading `+` or `-` sign\n- `NaN` is allowed\n- `Infinity` is allowed with an optional leading `+` or `-` sign\n- a FloatingPointTypeSuffix is not allowed\nThis is the inverse of function `value:toString` applied to an `float`.\n  \n**Params**  \n- `string` s: string representation of a float  \n  \n**Return** `float|error`   \n- float value or error  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "fromString",
      "insertText": "fromString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toHexString(float x)",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns a string that represents a float value as a hexadecimal floating point number.\n\nThe returned string will comply to the grammar of HexFloatingPointLiteral\nin the Ballerina spec with the following modifications:\n- it will have a leading `-` sign if negative\n- positive infinity will be represented by `Infinity`\n- negative infinity will be represented by `-Infinity`\n- NaN will be represented by `NaN`\nThe representation includes `0x` for finite numbers.\n  \n**Params**  \n- `float` x: float value  \n  \n**Return** `string`   \n- hexadecimal floating point hex string representation  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "toHexString",
      "insertText": "toHexString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromHexString(string s)",
      "kind": "Function",
      "detail": "float|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturn the float value represented by a string.\n\nparameter `s` must follow the syntax of HexFloatingPointLiteral as defined by the Ballerina specification\nwith the following modifications\n- the HexFloatingPointLiteral may have a leading `+` or `-` sign\n- `NaN` is allowed\n- `Infinity` is allowed with an optional leading `+` or `-` sign\n  \n**Params**  \n- `string` s: hexadecimal floating point hex string representation  \n  \n**Return** `float|error`   \n- float value or error  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "fromHexString",
      "insertText": "fromHexString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toBitsInt(float x)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns IEEE 64-bit binary floating point format representation of a float value as an int.\n  \n**Params**  \n- `float` x: float value  \n  \n**Return** `int`   \n- parameter `x` bit pattern as an int  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "toBitsInt",
      "insertText": "toBitsInt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromBitsInt(int x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the float that is represented in IEEE 64-bit floating point by an int.\n\nAll bit patterns that IEEE defines to be NaNs will all be mapped to the single float NaN value.\n  \n**Params**  \n- `int` x: int value  \n  \n**Return** `float`   \n- parameter `x` bit pattern as a float  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "fromBitsInt",
      "insertText": "fromBitsInt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
