{
  "position": {
    "line": 2,
    "character": 18
  },
  "source": "statement_context/source/return_stmt_ctx_source18.bal",
  "description": "",
  "items": [
    {
      "label": "PI",
      "kind": "Variable",
      "detail": "3.141592653589793",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The number π."
        }
      },
      "sortText": "AC",
      "insertText": "PI",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "E",
      "kind": "Variable",
      "detail": "2.718281828459045",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Euler's number."
        }
      },
      "sortText": "AC",
      "insertText": "E",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "NaN",
      "kind": "Variable",
      "detail": "NaN",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "IEEE not-a-number value."
        }
      },
      "sortText": "AC",
      "insertText": "NaN",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Infinity",
      "kind": "Variable",
      "detail": "Infinity",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "IEEE positive infinity."
        }
      },
      "sortText": "AC",
      "insertText": "Infinity",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isFinite(float x)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nTests whether a float is finite.\n\nExactly one of isFinite, isInfinite and IsNaN will be true for any float value\n\n```ballerina\nfloat f = 1.2;\nf.isFinite() ⇒ true\nfloat:Infinity.isFinite() ⇒ false\n```\n  \n**Params**  \n- `float` x: the float to be tested  \n  \n**Return** `boolean`   \n- true if parameter `x` is finite, i.e., neither NaN nor +∞ nor -∞  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "isFinite",
      "insertText": "isFinite(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "isInfinite(float x)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nTests whether a float is infinite.\n\nExactly one of isFinite, isInfinite and IsNaN will be true for any float value\n\n```ballerina\nfloat f = 3.21;\nf.isInfinite() ⇒ false\nfloat:Infinity.isInfinite() ⇒ true\n```\n  \n**Params**  \n- `float` x: the float to be tested  \n  \n**Return** `boolean`   \n- true if parameter `x` is either +∞ or -∞  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "isInfinite",
      "insertText": "isInfinite(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "isNaN(float x)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nTests whether a float is NaN.\n\nExactly one of isFinite, isInfinite and IsNaN will be true for any float value.\n\n```ballerina\nfloat f = 0.23;\nf.isNaN() ⇒ false\nfloat:NaN.isNaN() ⇒ true\n```\n  \n**Params**  \n- `float` x: the float to be tested  \n  \n**Return** `boolean`   \n- true if parameter `x` is NaN  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "isNaN",
      "insertText": "isNaN(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sum(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the sum of zero or more float values.\n\nResult is NaN if any arg is NaN\n\n```ballerina\nfloat:sum(1.2, 2.3, 3.4) ⇒ 6.9\nfloat[] scores = [11.1, 22.2, 33.3];\nfloat:sum(...scores) ⇒ 66.6\nfloat f = 21.2;\nf.sum(10.5, 21, 32.4) ⇒ 85.1\nfloat:sum(float:NaN, 2.3, 3.4) ⇒ NaN\n```\n  \n**Params**  \n- `float[]` xs: float values to sum  \n  \n**Return** `float`   \n- sum of all of parameter `xs`, +0.0 if parameter `xs` is empty  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sum",
      "insertText": "sum(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "max(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the maximum of zero or more float values.\n\nResult is -∞ if no args\nNaN if any arg is NaN\n\n```ballerina\nfloat:max(1.2, 12.3, 3.4) ⇒ 12.3\nfloat[] marks = [70.3, 80.5, 98.1, 92.3];\nfloat:max(...marks) ⇒ 98.1\nfloat f = 21.2;\nf.max(40.5, 21, 32.4) ⇒ 40.5\nfloat:max() ⇒ -Infinity\nfloat:max(1.2, float:NaN, 3.4) ⇒ NaN\n```\n  \n**Params**  \n- `float[]` xs: float values to operate on  \n  \n**Return** `float`   \n- maximum value of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "max",
      "insertText": "max(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "min(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the minimum of zero or more float values.\n\nResult is +∞ if no args\nResult is NaN if any arg is NaN\n\n```ballerina\nfloat:min(5.2, 2.3, 3.4) ⇒ 2.3\nfloat[] marks = [90.3, 80.5, 98, 92.3];\nfloat:min(...marks) ⇒ 80.5\nfloat f = 1.2;\nf.min(10.5, 21, 32.4) ⇒ 1.2\nfloat:min() ⇒ Infinity\nfloat:min(5.2, float:NaN, 3.4) ⇒ NaN\n```\n  \n**Params**  \n- `float[]` xs: float values to operate on  \n  \n**Return** `float`   \n- minimum value of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "min",
      "insertText": "min(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "abs(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the IEEE absolute value of a float value.\n\n```ballerina\nfloat f = -3.21;\nf.abs() ⇒ 3.21\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- absolute value of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "abs",
      "insertText": "abs(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "round(float x, int fractionDigits)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRounds a float value to a specified number of digits.\n\nReturns the float value that is an integral multiple of 10 raised to the power of `-fractionDigits` and closest to `x`.\nIf there are two such values, choose the one whose final digit is even\n(this is the round-to-nearest rounding mode, which is the default for IEEE and for Ballerina).\nA value of `fractionDigits` greater than 0 thus corresponds to the number of digits after the decimal\npoint being `fractionDigits`; a value of 0 for `fractionDigits` rounds to an integer.\nIf `x` is NaN, +0, -0, +∞ or -∞, then the result is `x`.\nWhen `fractionDigits` is 0, this is\nthe same as Java Math.rint method, .NET Math.Round method and\nIEEE roundToIntegralTiesToEven operation\nNote that `<int>x` is the same as `<int>x.round(0)`.\n\n```ballerina\nfloat f = 3.55;\nf.round() ⇒ 4.0\nfloat g = 4.55555;\ng.round(3) ⇒ 4.556\nfloat h = 2.5;\nh.round(0) ⇒ 2.0\nfloat i = 3.5;\ni.round(0) ⇒ 4.0\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n- `int` fractionDigits: the number of digits after the decimal point(Defaultable)  \n  \n**Return** `float`   \n- float value closest to `x` that is an integral multiple of 10 raised to the power of `-fractionDigits`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "round",
      "insertText": "round(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "floor(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRounds a float down to the closest integral value.\n\n```ballerina\nfloat f = 3.51;\nf.floor() ⇒ 3.0\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- largest (closest to +∞) float value not greater than parameter `x` that is a mathematical integer  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "floor",
      "insertText": "floor(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "ceiling(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRounds a float up to the closest integral value.\n\n```ballerina\nfloat f = 3.51;\nf.ceiling() ⇒ 4.0\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- smallest (closest to -∞) decimal value not less than parameter `x` that is a mathematical integer  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "ceiling",
      "insertText": "ceiling(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sqrt(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the square root of a float value.\n\nCorresponds to IEEE squareRoot operation.\n\n```ballerina\nfloat f = 1.96;\nf.sqrt() ⇒ 1.4\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- square root of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sqrt",
      "insertText": "sqrt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cbrt(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the cube root of a float value.\n\nCorresponds to IEEE rootn(x, 3) operation.\n\n```ballerina\nfloat f = 0.125;\nf.cbrt() ⇒ 0.5\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- cube root of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "cbrt",
      "insertText": "cbrt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "pow(float x, float y)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRaises one float value to the power of another float values.\n\nCorresponds to IEEE pow(x, y) operation.\n\n```ballerina\nfloat f = 2.1;\nf.pow(2) ⇒ 4.41\n```\n  \n**Params**  \n- `float` x: base value  \n- `float` y: the exponent  \n  \n**Return** `float`   \n- `x` raised to the power of parameter `y`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "pow",
      "insertText": "pow(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "log(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the natural logarithm of a float value.\n\nCorresponds to IEEE log operation.\n\n```ballerina\nfloat f = 234.56;\nf.log() ⇒ 5.4577114186982865\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- natural logarithm of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "log",
      "insertText": "log(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "log10(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the base 10 logarithm of a float value.\n\nCorresponds to IEEE log10 operation.\n\n```ballerina\nfloat f = 0.1;\nf.log10() ⇒ -1.0\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- base 10 logarithm of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "log10",
      "insertText": "log10(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "exp(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nRaises Euler's number to a power.\n\nCorresponds to IEEE exp operation.\n\n```ballerina\nfloat f = 2.3;\nf.exp() ⇒ 9.974182454814718\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- Euler's number raised to the power parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "exp",
      "insertText": "exp(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sin(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the sine of a float value.\n\nCorresponds to IEEE sin operation.\n\n```ballerina\nfloat f = 2.3;\nf.sin() ⇒ 0.7457052121767203\n```\n  \n**Params**  \n- `float` x: float value, specifying an angle in radians  \n  \n**Return** `float`   \n- the sine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sin",
      "insertText": "sin(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cos(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the cosine of a float value.\n\nCorresponds to IEEE cos operation.\n\n```ballerina\nfloat f = 0.7;\nf.cos() ⇒ 0.7648421872844885\n```\n  \n**Params**  \n- `float` x: float value, specifying an angle in radians  \n  \n**Return** `float`   \n- the cosine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "cos",
      "insertText": "cos(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "tan(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the tangent of a float value.\n\nCorresponds to IEEE tan operation\n\n```ballerina\nfloat f = 0.2;\nf.tan() ⇒ 0.2027100355086725\n```\n  \n**Params**  \n- `float` x: float value, specifying an angle in radians  \n  \n**Return** `float`   \n- the tangent of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "tan",
      "insertText": "tan(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "acos(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the arccosine of a float value.\n\nCorresponds to IEEE acos operation.\n\n```ballerina\nfloat f = 0.5;\nf.acos() ⇒ 1.0471975511965979\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- the arccosine of parameter `x` in radians  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "acos",
      "insertText": "acos(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "atan(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the arctangent of a float value.\n\n```ballerina\nfloat f = 243.25;\nf.atan() ⇒ 1.5666853530369307\n```\n\nCorresponds to IEEE atan operation.\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- the arctangent of parameter `x` in radians  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "atan",
      "insertText": "atan(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "asin(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the arcsine of a float value.\n\nCorresponds to IEEE asin operation.\n\n```ballerina\nfloat f = 0.5;\nf.asin() ⇒ 0.5235987755982989\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- the arcsine of parameter `x` in radians  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "asin",
      "insertText": "asin(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "atan2(float y, float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nPerforms the 2-argument arctangent operation.\n\nCorresponds IEEE atan2(y, x) operation.\n\n```ballerina\nfloat:atan2(24.21, 12.345) ⇒ 1.0992495979622232\n```\n  \n**Params**  \n- `float` y: the y-coordinate  \n- `float` x: the x-coordinate  \n  \n**Return** `float`   \n- the angle in radians from the positive x-axis to the point  \nwhose Cartesian coordinates are `(x, y)`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "atan2",
      "insertText": "atan2(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "sinh(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the hyperbolic sine of a float value.\n\nCorresponds to IEEE sinh operation.\n\n```ballerina\nfloat f = 0.71;\nf.sinh() ⇒ 0.7711735305928927\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- hyperbolic sine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "sinh",
      "insertText": "sinh(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cosh(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the hyperbolic cosine of a float value.\n\nCorresponds to IEEE cosh operation.\n\n```ballerina\nfloat f = 0.52;\nf.cosh() ⇒ 1.1382740988345403\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- hyperbolic cosine of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "cosh",
      "insertText": "cosh(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "tanh(float x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the hyperbolic tangent of a float value.\n\nCorresponds to IEEE tanh operation.\n\n```ballerina\nfloat f = 0.9;\nf.tanh() ⇒ 0.7162978701990245\n```\n  \n**Params**  \n- `float` x: float value to operate on  \n  \n**Return** `float`   \n- hyperbolic tangent of parameter `x`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "tanh",
      "insertText": "tanh(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromString(string s)",
      "kind": "Function",
      "detail": "float|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the float value represented by a string.\n\nparameter `s` must follow the syntax of DecimalFloatingPointNumber as defined by the Ballerina specification\nwith the following modifications\n- the DecimalFloatingPointNumber may have a leading `+` or `-` sign\n- `NaN` is allowed\n- `Infinity` is allowed with an optional leading `+` or `-` sign\n- a FloatingPointTypeSuffix is not allowed\nThis is the inverse of function ``value:toString`` applied to an `float`.\n\n```ballerina\nfloat:fromString(\"0.2453\") ⇒ 0.2453\nfloat:fromString(\"-10\") ⇒ -10.0\nfloat:fromString(\"123f\") ⇒ error\n```\n  \n**Params**  \n- `string` s: string representation of a float  \n  \n**Return** `float|error`   \n- float value or error  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "fromString",
      "insertText": "fromString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toHexString(float x)",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns a string that represents a float value as a hexadecimal floating point number.\n\nThe returned string will comply to the grammar of HexFloatingPointLiteral\nin the Ballerina spec with the following modifications:\n- it will have a leading `-` sign if negative\n- positive infinity will be represented by `Infinity`\n- negative infinity will be represented by `-Infinity`\n- NaN will be represented by `NaN`\nThe representation includes `0x` for finite numbers.\n\n```ballerina\nfloat f = -10.2453;\nf.toHexString() ⇒ -0x1.47d97f62b6ae8p3\n```\n  \n**Params**  \n- `float` x: float value  \n  \n**Return** `string`   \n- hexadecimal floating point hex string representation  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "toHexString",
      "insertText": "toHexString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromHexString(string s)",
      "kind": "Function",
      "detail": "float|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturn the float value represented by a string.\n\nparameter `s` must follow the syntax of HexFloatingPointLiteral as defined by the Ballerina specification\nwith the following modifications\n- the HexFloatingPointLiteral may have a leading `+` or `-` sign\n- `NaN` is allowed\n- `Infinity` is allowed with an optional leading `+` or `-` sign\n\n```ballerina\nfloat:fromHexString(\"0x1.0a3d70a3d70a4p4\") ⇒ 16.64\nfloat:fromHexString(\"0x1J\") ⇒ error\n```\n  \n**Params**  \n- `string` s: hexadecimal floating point hex string representation  \n  \n**Return** `float|error`   \n- float value or error  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "fromHexString",
      "insertText": "fromHexString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toBitsInt(float x)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns IEEE 64-bit binary floating point format representation of a float value as an int.\n\n```ballerina\nfloat f = 4.16;\nf.toBitsInt() ⇒ 4616369762039853220\n```\n  \n**Params**  \n- `float` x: float value  \n  \n**Return** `int`   \n- parameter `x` bit pattern as an int  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "toBitsInt",
      "insertText": "toBitsInt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "fromBitsInt(int x)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the float that is represented in IEEE 64-bit floating point by an int.\n\nAll bit patterns that IEEE defines to be NaNs will all be mapped to the single float NaN value.\n\n```ballerina\nfloat:fromBitsInt(4) ⇒ 2.0E-323\n```\n  \n**Params**  \n- `int` x: int value  \n  \n**Return** `float`   \n- parameter `x` bit pattern as a float  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "fromBitsInt",
      "insertText": "fromBitsInt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toFixedString(float x, int? fractionDigits)",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns a string that represents `x` using fixed-point notation.\nThe returned string will be in the same format used by `value:toString`,\nexcept that it will not include an exponent.\nIf `x` is NaN or infinite, the result will be the same as `value:toString`.\nThis will panic if `fractionDigits` is less than 0.\nIf `fractionDigits` is zero, there will be no decimal point.\nAny necessary rounding will use the roundTiesToEven rounding direction.\n\n```ballerina\nfloat f = 12.456;\nf.toFixedString(2) ⇒ 12.46\nfloat g = 12.456;\ng.toFixedString(0) ⇒ 12\nfloat h = 12.456;\nh.toFixedString(-3) ⇒ panic\n```\n  \n**Params**  \n- `float` x: float value  \n- `int?` fractionDigits: number of digits following the decimal point; `()` means to use\nthe minimum number of digits required to accurately represent the value  \n  \n**Return** `string`   \n- string representation of `x` in fixed-point notation  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "toFixedString",
      "insertText": "toFixedString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toExpString(float x, int? fractionDigits)",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns a string that represents `x` using scientific notation.\nThe returned string will be in the same format used by `value:toString`,\nexcept that it will always include an exponent and there will be exactly\none digit before the decimal point.\nBut if `x` is NaN or infinite, the result will be the same as `value:toString`.\nThe digit before the decimal point will be zero only if all other digits\nare zero.\nThis will panic if `fractionDigits` is less than 0.\nIf `fractionDigits` is zero, there will be no decimal point.\nAny necessary rounding will use the roundTiesToEven rounding direction.\nThe exponent in the result uses lower-case `e`, followed by a `+` or `-` sign,\nfollowed by at least two digits, and only as many more digits as are needed\nto represent the result. If `x` is zero, the exponent is zero. A zero exponent\nis represented with a `+` sign.\n\n```ballerina\nfloat f = 12.456;\nf.toExpString(2) ⇒ 1.25e+1\nfloat g = 12.456;\ng.toExpString(()) ⇒ 1.2456e+1\nfloat h = 12.456;\nh.toExpString(-2) ⇒ panic\n```\n  \n**Params**  \n- `float` x: float value  \n- `int?` fractionDigits: number of digits following the decimal point; `()` means to use\nthe minimum number of digits required to accurately represent the value  \n  \n**Return** `string`   \n- string representation of `x` in scientific notation  \n  \n"
        }
      },
      "sortText": "E",
      "filterText": "toExpString",
      "insertText": "toExpString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "avg(float... xs)",
      "kind": "Function",
      "detail": "float",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.float:0.0.0_  \n  \nReturns the average of its arguments.\nReturn NaN if there are no arguments,\n```ballerina\nfloat:avg(2, 2) ⇒ 2.0\n```\n  \n**Params**  \n- `float[]` xs: float values  \n  \n**Return** `float`   \n- average of all of parameter `xs`  \n  \n"
        }
      },
      "sortText": "AA",
      "filterText": "avg",
      "insertText": "avg(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
