{
  "position": {
    "line": 4,
    "character": 7
  },
  "source": "field_access_expression_context/source/field_access_ctx_source28.bal",
  "items": [
    {
      "label": "reduce(function () func, array:Type1 initial)",
      "kind": "Function",
      "detail": "array:Type1",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nCombines the members of an array using a combining function.\n\nThe combining function takes the combined value so far and a member of the array,\nand returns a new combined value.\n\nFor example\n```\nreduce([1, 2, 3], function (int total, int n) returns int { return total + n; }, 0)\n```\nis the same as `sum(1, 2, 3)`.\n  \n**Params**  \n- `function ()` func: combining function  \n- `array:Type1` initial: initial value for the first argument of combining parameter `func`  \n  \n**Return** `array:Type1`   \n- result of combining the members of parameter `arr` using parameter `func`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "reduce",
      "insertText": "reduce(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "forEach(function () func)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nApplies a function to each member of an array.\n\nThe parameter `func` is applied to each member of parameter `arr` in order.\n  \n**Params**  \n- `function ()` func: a function to apply to each member"
        }
      },
      "sortText": "CD",
      "filterText": "forEach",
      "insertText": "forEach(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "shift()",
      "kind": "Function",
      "detail": "array:Type1",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves and returns first member of an array.\n\nThe array must not be empty.\n  \n  \n  \n**Return** `array:Type1`   \n- the value that was the first member of the array  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "shift",
      "insertText": "shift()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "length()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns the number of members of an array.\n  \n  \n  \n**Return** `int`   \n- number of members in parameter `arr`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "length",
      "insertText": "length()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "sort(array:SortDirection direction, function ()? key)",
      "kind": "Function",
      "detail": "array:Type1[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nSorts an array.\n\nIf the member type of the array is not ordered, then the parameter `key` function\nmust be specified.\nSorting works the same as with the parameter `sort` clause of query expressions.\n  \n**Params**  \n- `array:SortDirection` direction: direction in which to sort(Defaultable)  \n- `function ()?` key: function that returns a key to use to sort the members(Defaultable)  \n  \n**Return** `array:Type1[]`   \n- a new array consisting of the members of parameter `arr` in sorted order  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "sort",
      "insertText": "sort(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "reverse()",
      "kind": "Function",
      "detail": "array:Type1[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReverses the order of the members of an array.\n  \n  \n  \n**Return** `array:Type1[]`   \n- parameter `arr` with its members in reverse order  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "reverse",
      "insertText": "reverse()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toStream()",
      "kind": "Function",
      "detail": "stream<array:Type1>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns a stream from the given array.\n  \n  \n  \n**Return** `stream<array:Type1>`   \n- The stream representation of the array `arr`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toStream",
      "insertText": "toStream()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "remove(int index)",
      "kind": "Function",
      "detail": "array:Type1",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves a member of an array.\n\nThis removes the member of parameter `arr` with index parameter `index` and returns it.\nIt panics if there is no such member.\n  \n**Params**  \n- `int` index: index of member to be removed from parameter `arr`  \n  \n**Return** `array:Type1`   \n- the member of parameter `arr` that was at parameter `index`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "remove",
      "insertText": "remove(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "push(array:Type1... vals)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nAdds values to the end of an array.\n  \n**Params**  \n- `array:Type1[]` vals: values to add to the end of the array"
        }
      },
      "sortText": "CD",
      "filterText": "push",
      "insertText": "push(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "filter(function () func)",
      "kind": "Function",
      "detail": "array:Type1[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nSelects the members from an array for which a function returns true.\n  \n**Params**  \n- `function ()` func: a predicate to apply to each member to test whether it should be selected  \n  \n**Return** `array:Type1[]`   \n- new array only containing members of parameter `arr` for which parameter `func` evaluates to true  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "filter",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "pop()",
      "kind": "Function",
      "detail": "array:Type1",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves and returns the last member of an array.\n\nThe array must not be empty.\n  \n  \n  \n**Return** `array:Type1`   \n- removed member  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "pop",
      "insertText": "pop()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "iterator()",
      "kind": "Function",
      "detail": "object {public isolated function next() returns record {| array:Type value; |}?;}",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns an iterator over an array.\n  \n  \n  \n**Return** `object {public isolated function next() returns record {| array:Type value; |}?;}`   \n- a new iterator object that will iterate over the members of parameter `arr`.  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "iterator",
      "insertText": "iterator()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "removeAll()",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves all members of an array.\n\nPanics if any member cannot be removed.  \n"
        }
      },
      "sortText": "CD",
      "filterText": "removeAll",
      "insertText": "removeAll()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setLength(int length)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nChanges the length of an array.\n\n`setLength(arr, 0)` is equivalent to `removeAll(arr)`.\n  \n**Params**  \n- `int` length: new length"
        }
      },
      "sortText": "CD",
      "filterText": "setLength",
      "insertText": "setLength(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "slice(int startIndex, int endIndex)",
      "kind": "Function",
      "detail": "array:Type1[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns a subarray using a start index (inclusive) and an end index (exclusive).\n  \n**Params**  \n- `int` startIndex: index of first member to include in the slice  \n- `int` endIndex: index of first member not to include in the slice(Defaultable)  \n  \n**Return** `array:Type1[]`   \n- array slice within specified range  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "slice",
      "insertText": "slice(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "enumerate()",
      "kind": "Function",
      "detail": "[int, array:Type1][]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns a new array consisting of index and member pairs.\n  \n  \n  \n**Return** `[int, array:Type1][]`   \n- array of index, member pairs  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "enumerate",
      "insertText": "enumerate()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "unshift(array:Type1... vals)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nAdds values to the start of an array.\n\nThe values newly added to the array will be in the same order\nas they are in parameter `vals`.\n  \n**Params**  \n- `array:Type1[]` vals: values to add to the start of the array"
        }
      },
      "sortText": "CD",
      "filterText": "unshift",
      "insertText": "unshift(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "map(function () func)",
      "kind": "Function",
      "detail": "array:Type1[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nApplies a function to each member of an array and returns an array of the results.\n  \n**Params**  \n- `function ()` func: a function to apply to each member  \n  \n**Return** `array:Type1[]`   \n- new array containing result of applying parameter `func` to each member of parameter `arr` in order  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "map",
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toBalString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConverts a value to a string that describes the value in Ballerina syntax.\n\nIf parameter `v` is anydata and does not have cycles, then the result will\nconform to the grammar for a Ballerina expression and when evaluated\nwill result in a value that is == to parameter `v`.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the expression style.\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toBalString",
      "insertText": "toBalString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ensureType(typedesc<any> t)",
      "kind": "Function",
      "detail": "t|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nSafely casts a value to a type.\n\nThis casts a value to a type in the same way as a type cast expression,\nbut returns an error if the cast cannot be done, rather than panicking.\n  \n**Params**  \n- `typedesc<any>` t: a typedesc for the type to which to cast it\nreturn - `v` cast to the type described by parameter `t`, or an error, if the cast cannot be done(Defaultable)  \n  \n**Return** `t|error`   \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "ensureType",
      "insertText": "ensureType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nPerforms a direct conversion of a value to a string.\n\nThe conversion is direct in the sense that when applied to a value that is already\na string it leaves the value unchanged.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the direct style.\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toString",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    }
  ]
}
