{
  "position": {
    "line": 7,
    "character": 28
  },
  "source": "field_access_expression_context/source/field_access_ctx_source32.bal",
  "items": [
    {
      "label": "toBalString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConverts a value to a string that describes the value in Ballerina syntax.\n\nIf parameter `v` is anydata and does not have cycles, then the result will\nconform to the grammar for a Ballerina expression and when evaluated\nwill result in a value that is == to parameter `v`.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the expression style.\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "AD",
      "filterText": "toBalString",
      "insertText": "toBalString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nPerforms a direct conversion of a value to a string.\n\nThe conversion is direct in the sense that when applied to a value that is already\na string it leaves the value unchanged.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the direct style.\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "AD",
      "filterText": "toString",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cloneReadOnly()",
      "kind": "Function",
      "detail": "value:CloneableType & readonly",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns a clone of a value that is read-only, i.e., immutable.\n\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Return** `value:CloneableType & readonly`   \n- immutable clone of parameter `v`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "cloneReadOnly",
      "insertText": "cloneReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "clone()",
      "kind": "Function",
      "detail": "value:CloneableType",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns a clone of a value.\n\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n  \n  \n  \n**Return** `value:CloneableType`   \n- clone of parameter `v`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "clone",
      "insertText": "clone()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ensureType(typedesc<any> t)",
      "kind": "Function",
      "detail": "t|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nSafely casts a value to a type.\n\nThis casts a value to a type in the same way as a type cast expression,\nbut returns an error if the cast cannot be done, rather than panicking.\n  \n**Params**  \n- `typedesc<any>` t: a typedesc for the type to which to cast it\nreturn - `v` cast to the type described by parameter `t`, or an error, if the cast cannot be done(Defaultable)  \n  \n**Return** `t|error`   \n  \n"
        }
      },
      "sortText": "BD",
      "filterText": "ensureType",
      "insertText": "ensureType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "ns1",
      "kind": "Variable",
      "detail": "xmlns",
      "documentation": {
        "left": "http://ballerina.com/aa"
      },
      "sortText": "CB",
      "insertText": "ns1",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ns0",
      "kind": "Variable",
      "detail": "xmlns",
      "documentation": {
        "left": "http://ballerina.com/aa"
      },
      "sortText": "CB",
      "insertText": "ns0",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "module1",
      "kind": "Module",
      "detail": "Module",
      "sortText": "CS",
      "filterText": "module1",
      "insertText": "module1",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ballerina/lang.test",
      "kind": "Module",
      "detail": "Module",
      "sortText": "CR",
      "filterText": "test",
      "insertText": "test",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.test;\n"
        }
      ]
    },
    {
      "label": "ballerina/lang.array",
      "kind": "Module",
      "detail": "Module",
      "sortText": "CR",
      "filterText": "array",
      "insertText": "array",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.array;\n"
        }
      ]
    },
    {
      "label": "ballerina/jballerina.java",
      "kind": "Module",
      "detail": "Module",
      "sortText": "CR",
      "filterText": "java",
      "insertText": "java",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/jballerina.java;\n"
        }
      ]
    },
    {
      "label": "ballerina/lang.value",
      "kind": "Module",
      "detail": "Module",
      "sortText": "CR",
      "filterText": "value",
      "insertText": "value",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.value;\n"
        }
      ]
    },
    {
      "label": "ballerina/lang.runtime",
      "kind": "Module",
      "detail": "Module",
      "sortText": "CR",
      "filterText": "runtime",
      "insertText": "runtime",
      "insertTextFormat": "Snippet",
      "additionalTextEdits": [
        {
          "range": {
            "start": {
              "line": 0,
              "character": 0
            },
            "end": {
              "line": 0,
              "character": 0
            }
          },
          "newText": "import ballerina/lang.runtime;\n"
        }
      ]
    },
    {
      "label": "boolean",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "boolean",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "decimal",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "decimal",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "error",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "error",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "float",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "float",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "future",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "future",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "int",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "int",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "map",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "map",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "object",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "object",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "stream",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "stream",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "string",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "string",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "table",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "table",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "transaction",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "transaction",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "typedesc",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "typedesc",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "xml",
      "kind": "Unit",
      "detail": "type",
      "sortText": "CR",
      "insertText": "xml",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "data()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nReturns a string with the character data of an xml value.\n\nThe character data of an xml value is as follows:\n* the character data of a text item is a string with one character for each\ncharacter information item represented by the text item;\n* the character data of an element item is the character data of its children;\n* the character data of a comment item is the empty string;\n* the character data of a processing instruction item is the empty string;\n* the character data of an empty xml sequence is the empty string;\n* the character data of the concatenation of two xml sequences x1 and x2 is the\nconcatenation of the character data of x1 and the character data of x2.\n  \n  \n  \n**Return** `string`   \n- a string consisting of all the character data of parameter `x`  \n  \n"
        }
      },
      "sortText": "AD",
      "filterText": "data",
      "insertText": "data()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "forEach(function () func)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nApplies a function to each item in an xml sequence.\n\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function ()` func: a function to apply to each item in parameter `x`"
        }
      },
      "sortText": "CD",
      "filterText": "forEach",
      "insertText": "forEach(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "length()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nReturns number of xml items in an xml value.\n  \n  \n  \n**Return** `int`   \n- number of xml items in parameter `x`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "length",
      "insertText": "length()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "filter(function () func)",
      "kind": "Function",
      "detail": "xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nSelects the items from an xml sequence for which a function returns true.\n\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function ()` func: a predicate to apply to each item to test whether it should be selected  \n  \n**Return** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- new xml sequence containing items in parameter `x` for which function `func` evaluates to true  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "filter",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "iterator()",
      "kind": "Function",
      "detail": "object {public isolated function next() returns record {| xml:ItemType value; |}?;}",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nReturns an iterator over the xml items of an xml sequence.\n\n# Each item is represented by an xml singleton.\n  \n  \n  \n**Return** `object {public isolated function next() returns record {| xml:ItemType value; |}?;}`   \n- iterator object  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "iterator",
      "insertText": "iterator()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "strip()",
      "kind": "Function",
      "detail": "xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nStrips the insignificant parts of the an xml value.\n\nComment items, processing instruction items are considered insignificant.\nAfter removal of comments and processing instructions, the text is grouped into\nthe biggest possible chunks (i.e., only elements cause division into multiple chunks)\nand a chunk is considered insignificant if the entire chunk is whitespace.\n  \n  \n  \n**Return** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- `x` with insignificant parts removed  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "strip",
      "insertText": "strip()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "slice(int startIndex, int endIndex)",
      "kind": "Function",
      "detail": "xml<xml:Element>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nReturns a subsequence of an xml value.\n  \n**Params**  \n- `int` startIndex: start index, inclusive  \n- `int` endIndex: end index, exclusive(Defaultable)  \n  \n**Return** `xml<xml:Element>`   \n- a subsequence of parameter `x` consisting of items with index >= parameter `startIndex` and < parameter `endIndex`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "slice",
      "insertText": "slice(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "children()",
      "kind": "Function",
      "detail": "xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nReturns the children of elements in an xml value.\n\nWhen parameter `x` is of type `Element`, it is equivalent to function `getChildren`.\nThis is equivalent to `elements(x).map(getChildren)`.\n  \n  \n  \n**Return** `xml<xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text>`   \n- xml sequence containing the children of each element x concatenated in order  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "children",
      "insertText": "children()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "get(int i)",
      "kind": "Function",
      "detail": "xml:Element",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nReturns the item of an xml sequence with given index.\n\nThis differs from `x[i]` in that it panics if\nparameter `x` does not have an item with index parameter `i`.\n  \n**Params**  \n- `int` i: the index  \n  \n**Return** `xml:Element`   \n- the item with index parameter `i` in parameter `x`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "get",
      "insertText": "get(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "elements(string? nm)",
      "kind": "Function",
      "detail": "xml<xml:Element>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nSelects elements from an xml value.\n\nIf parameter `nm` is `()`, selects all elements;\notherwise, selects only elements whose expanded name is parameter `nm`.\n  \n**Params**  \n- `string?` nm: the expanded name of the elements to be selected, or `()` for all elements(Defaultable)  \n  \n**Return** `xml<xml:Element>`   \n- an xml sequence consisting of all the element items in parameter `x` whose expanded name is parameter `nm`,  \nor, if parameter `nm` is `()`, all element items in parameter `x`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "elements",
      "insertText": "elements(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "text()",
      "kind": "Function",
      "detail": "xml:Text",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nSelects all the items in a sequence that are of type `xml:Text`.\n  \n  \n  \n**Return** `xml:Text`   \n- an xml sequence consisting of selected text items  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "text",
      "insertText": "text()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "elementChildren(string? nm)",
      "kind": "Function",
      "detail": "xml<xml:Element>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nSelects element children of an xml value.\n\nThis is equivalent to `children(x).elements(nm)`.\n  \n**Params**  \n- `string?` nm: the expanded name of the elements to be selected, or `()` for all elements(Defaultable)  \n  \n**Return** `xml<xml:Element>`   \n- an xml sequence consisting of child elements of elements in parameter `x`; if parameter `nm`  \nis `()`, returns a sequence of all such elements;  \notherwise, include only elements whose expanded name is parameter `nm`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "elementChildren",
      "insertText": "elementChildren(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "map(function () func)",
      "kind": "Function",
      "detail": "xml<xml:XmlType>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.xml:0.0.0_  \n  \nApplies a function to each item in an xml sequence, and returns an xml sequence of the results.\n\nEach item is represented as a singleton value.\n  \n**Params**  \n- `function ()` func: a function to apply to each child or parameter `item`  \n  \n**Return** `xml<xml:XmlType>`   \n- new xml value containing result of applying function `func` to each child or parameter `item`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "map",
      "insertText": "map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneWithType(typedesc<anydata> t)",
      "kind": "Function",
      "detail": "t|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConstructs a value with a specified type by cloning another value.\n\nWhen parameter `v` is a structural value, the inherent type of the value to be constructed\ncomes from parameter `t`. When parameter `t` is a union, it must be possible to determine which\nmember of the union to use for the inherent type by following the same rules\nthat are used by list constructor expressions and mapping constructor expressions\nwith the contextually expected type. If not, then an error is returned.\nThe `cloneWithType` operation is recursively applied to each member of parameter `v` using\nthe type descriptor that the inherent type requires for that member.\n\nLike the Clone abstract operation, this does a deep copy, but differs in\nthe following respects:\n- the inherent type of any structural values constructed comes from the specified\ntype descriptor rather than the value being constructed\n- the read-only bit of values and fields comes from the specified type descriptor\n- the graph structure of `v` is not preserved; the result will always be a tree;\nan error will be returned if `v` has cycles\n- immutable structural values are copied rather being returned as is; all\nstructural values in the result will be mutable.\n- numeric values can be converted using the NumericConvert abstract operation\n- if a record type descriptor specifies default values, these will be used\nto supply any missing members\n  \n**Params**  \n- `typedesc<anydata>` t: the type for the cloned to be constructed(Defaultable)  \n  \n**Return** `t|error`   \n- a new value that belongs to type `t`, or an error if this cannot be done  \n  \n"
        }
      },
      "sortText": "BD",
      "filterText": "cloneWithType",
      "insertText": "cloneWithType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toJson()",
      "kind": "Function",
      "detail": "json",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConverts a value of type `anydata` to `json`.\n\nThis does a deep copy of parameter `v` converting values that do\nnot belong to json into values that do.\nA value of type `xml` is converted into a string as if\nby the `toString` function.\nA value of type `table` is converted into a list of\nmappings one for each row.\nThe inherent type of arrays in the return value will be\n`json[]` and of mappings will be `map<json>`.\nA new copy is made of all structural values, including\nimmutable values.\nThis panics if parameter `v` has cycles.\n  \n  \n  \n**Return** `json`   \n- representation of `v` as value of type json  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toJson",
      "insertText": "toJson()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isReadOnly()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nTests whether a value is read-only, i.e., immutable.\n\nReturns true if read-only, false otherwise.\n  \n  \n  \n**Return** `boolean`   \n- true if read-only, false otherwise  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "isReadOnly",
      "insertText": "isReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJsonString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the string that represents a anydata value in JSON format.\n\nparameter `v` is first converted to `json` as if by the function `toJson`.\n  \n  \n  \n**Return** `string`   \n- string representation of parameter `v` converted to `json`  \n  \n"
        }
      },
      "sortText": "AD",
      "filterText": "toJsonString",
      "insertText": "toJsonString()",
      "insertTextFormat": "Snippet"
    }
  ]
}
