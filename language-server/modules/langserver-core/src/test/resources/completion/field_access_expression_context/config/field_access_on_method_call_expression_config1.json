{
  "position": {
    "line": 5,
    "character": 42
  },
  "source": "field_access_expression_context/source/field_access_on_method_call_expression_source1.bal",
  "description": "",
  "items": [
    {
      "label": "some(function (array:Type val) returns boolean func)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nTests whether a function returns true for some member of an array.\n\nThe parameter `func` is called for each member of parameter `arr` in order unless and until a call returns true.\nWhen the array is empty, returns false.\n\n```ballerina\nint[] numbers = [1, 2, 3, 5];\nnumbers.some(n => n % 2 == 0) ⇒ true\n```\n  \n**Params**  \n- `function (array:Type val) returns boolean` func: function to apply to each member  \n  \n**Return** `boolean`   \n- true if applying parameter `func` returns true for some member of `arr`; otherwise, false  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "some",
      "insertText": "some(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "shift()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves and returns first member of an array.\n\nThe array must not be empty.\n\n```ballerina\nint[] numbers = [2, 4, 6, 8, 10];\nnumbers.shift() ⇒ 2\nint[] values = [];\nvalues.shift() ⇒ panic\n```\n  \n  \n  \n**Return** `string`   \n- the value that was the first member of the array  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "shift",
      "insertText": "shift()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toStream()",
      "kind": "Function",
      "detail": "stream<string>",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns a stream from the given array.\n\n```ballerina\nstream<string> strm = [\"a\", \"b\", \"c\", \"d\"].toStream();\nstrm.next() ⇒ {\"value\":\"a\"}\n```\n  \n  \n  \n**Return** `stream<string>`   \n- The stream representation of the array `arr`  \nThe returned stream will use an iterator over `arr` and  \nwill therefore handle mutation of `arr` in the same way  \nas an iterator does.  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toStream",
      "insertText": "toStream()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "remove(int index)",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves a member of an array.\n\nThis removes the member of parameter `arr` with index parameter `index` and returns it.\nIt panics if there is no such member.\n\n```ballerina\nint[] numbers = [2, 4, 6, 8];\nnumbers.remove(1) ⇒ 4\nnumbers.remove(7) ⇒ panic\n```\n  \n**Params**  \n- `int` index: index of member to be removed from parameter `arr`  \n  \n**Return** `string`   \n- the member of parameter `arr` that was at parameter `index`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "remove",
      "insertText": "remove(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "pop()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves and returns the last member of an array.\n\nThe array must not be empty.\n\n```ballerina\nint[] numbers = [2, 4, 6, 8, 10];\nnumbers.pop() ⇒ 10\nint[] values = [];\nvalues.pop() ⇒ panic\n```\n  \n  \n  \n**Return** `string`   \n- removed member  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "pop",
      "insertText": "pop()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "iterator()",
      "kind": "Function",
      "detail": "object {public isolated function next() returns record {|string value;|}?;}",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns an iterator over an array.\n\n```ballerina\nobject {\n    public isolated function next() returns record {|int value;|}?;\n} iterator = [2, 4, 6, 8].iterator();\niterator.next() ⇒ {\"value\":2}\n```\n  \n  \n  \n**Return** `object {public isolated function next() returns record {|string value;|}?;}`   \n- a new iterator object that will iterate over the members of parameter `arr`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "iterator",
      "insertText": "iterator()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "removeAll()",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nRemoves all members of an array.\n\nPanics if any member cannot be removed.\n\n```ballerina\nint[] numbers = [2, 4, 6, 8];\nnumbers.removeAll();\nnumbers ⇒ []\nint[2] values = [1, 2];\nvalues.removeAll() ⇒ panic\n```\n  \n"
        }
      },
      "sortText": "AD",
      "filterText": "removeAll",
      "insertText": "removeAll()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "slice(int startIndex, int endIndex)",
      "kind": "Function",
      "detail": "string[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns a subarray using a start index (inclusive) and an end index (exclusive).\n\n```ballerina\nint[] numbers = [2, 4, 6, 8, 10, 12];\nnumbers.slice(3) ⇒ [8,10,12]\nnumbers.slice(0, 4) ⇒ [2,4,6,8]\nnumbers.slice(0, 10) ⇒ panic\n```\n  \n**Params**  \n- `int` startIndex: index of first member to include in the slice  \n- `int` endIndex: index of first member not to include in the slice(Defaultable)  \n  \n**Return** `string[]`   \n- array slice within specified range  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "slice",
      "insertText": "slice(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "enumerate()",
      "kind": "Function",
      "detail": "[int, string][]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns a new array consisting of index and member pairs.\n\n```ballerina\n[1, 2, 3, 4].enumerate() ⇒ [[0,1],[1,2],[2,3],[3,4]]\n```\n  \n  \n  \n**Return** `[int, string][]`   \n- array of index, member pairs  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "enumerate",
      "insertText": "enumerate()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "'map(function (array:Type val) returns array:Type1 func)",
      "kind": "Function",
      "detail": "array:Type1[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nApplies a function to each member of an array and returns an array of the results.\n\n```ballerina\nint[] numbers = [0, 1, 2];\nnumbers.map(n => n * 2) ⇒ [0,2,4]\n```\n  \n**Params**  \n- `function (array:Type val) returns array:Type1` func: a function to apply to each member  \n  \n**Return** `array:Type1[]`   \n- new array containing result of applying parameter `func` to each member of parameter `arr` in order  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "'map",
      "insertText": "'map(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "every(function (array:Type val) returns boolean func)",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nTests whether a function returns true for every member of an array.\n\nThe parameter `func` is called for each member of `arr` in order unless and until a call returns false.\nWhen the array is empty, returns true.\n\n```ballerina\nint[] numbers = [1, 2, 3, 5];\nnumbers.every(n => n % 2 == 0) ⇒ false\n```\n  \n**Params**  \n- `function (array:Type val) returns boolean` func: function to apply to each member  \n  \n**Return** `boolean`   \n- true if applying parameter func returns true for every member of `arr`; otherwise, false  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "every",
      "insertText": "every(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "indexOf(string val, int startIndex)",
      "kind": "Function",
      "detail": "int?",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns the index of first member of an array that is equal to a given value if there is one.\nReturns `()` if not found.\nEquality is tested using `==`.\n\n```ballerina\nstring[] strings = [\"a\", \"b\", \"d\", \"b\", \"d\"];\nstrings.indexOf(\"e\") is () ⇒ true\nstrings.indexOf(\"b\") ⇒ 1\nstrings.indexOf(\"b\", 2) ⇒ 3\n```\n  \n**Params**  \n- `string` val: member to search for  \n- `int` startIndex: index to start the search from(Defaultable)  \n  \n**Return** `int?`   \n- index of the member if found, else `()`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "indexOf",
      "insertText": "indexOf(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "reduce(function (array:Type1 accum, array:Type val) returns array:Type1 func, array:Type1 initial)",
      "kind": "Function",
      "detail": "array:Type1",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nCombines the members of an array using a combining function.\n\nThe combining function takes the combined value so far and a member of the array,\nand returns a new combined value.\n\n```ballerina\n[1, 2, 3].reduce(isolated function (int total, int next) returns int => total + next, 0) ⇒ 6\n```\n\n```\nreduce([1, 2, 3], function (int total, int n) returns int { return total + n; }, 0)\n```  \n**Params**  \n- `function (array:Type1 accum, array:Type val) returns array:Type1` func: combining function  \n- `array:Type1` initial: initial value for the first argument of combining parameter `func`  \n  \n**Return** `array:Type1`   \n- result of combining the members of parameter `arr` using parameter `func`  \n  \nFor example  \nis the same as `sum(1, 2, 3)`.  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "reduce",
      "insertText": "reduce(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "forEach(function (array:Type val) returns () func)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nApplies a function to each member of an array.\n\nThe parameter `func` is applied to each member of parameter `arr` in order.\n\n```ballerina\nint total = 0;\n[1, 2, 3].forEach(function (int i) {\n    total += i;\n});\ntotal ⇒ 6\n```\n  \n**Params**  \n- `function (array:Type val) returns ()` func: a function to apply to each member"
        }
      },
      "sortText": "AD",
      "filterText": "forEach",
      "insertText": "forEach(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "length()",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns the number of members of an array.\n\n```ballerina\n[\"a\", \"b\", \"c\", \"d\"].length() ⇒ 4\n```\n  \n  \n  \n**Return** `int`   \n- number of members in parameter `arr`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "length",
      "insertText": "length()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "sort(array:SortDirection direction, function (array:Type val) returns array:OrderedType? key)",
      "kind": "Function",
      "detail": "string[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nSorts an array.\n\nIf the member type of the array is not ordered, then the parameter `key` function\nmust be specified.\nSorting works the same as with the parameter `sort` clause of query expressions.\n\n```ballerina\nstring[] strings = [\"c\", \"a\", \"B\"];\nstrings.sort() ⇒ [\"B\",\"a\",\"c\"]\nstrings.sort(\"descending\") ⇒ [\"c\",\"a\",\"B\"]\nstrings.sort(key = string:toLowerAscii) ⇒ [\"a\",\"B\",\"c\"]\nstrings.sort(\"descending\", string:toLowerAscii) ⇒ [\"c\",\"B\",\"a\"]\n```\n  \n**Params**  \n- `array:SortDirection` direction: direction in which to sort(Defaultable)  \n- `function (array:Type val) returns array:OrderedType?` key: function that returns a key to use to sort the members(Defaultable)  \n  \n**Return** `string[]`   \n- a new array consisting of the members of parameter `arr` in sorted order  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "sort",
      "insertText": "sort(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "reverse()",
      "kind": "Function",
      "detail": "string[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReverses the order of the members of an array.\n\n```ballerina\n[2, 4, 12, 8, 10].reverse() ⇒ [10,8,12,4,2]\n```\n  \n  \n  \n**Return** `string[]`   \n- parameter `arr` with its members in reverse order  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "reverse",
      "insertText": "reverse()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "push(string... vals)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nAdds values to the end of an array.\n\n```ballerina\nint[] numbers = [2];\nnumbers.push(4, 6);\nnumbers ⇒ [2,4,6]\nint[] moreNumbers = [8, 10, 12, 14];\nnumbers.push(...moreNumbers);\nnumbers ⇒ [2,4,6,8,10,12,14]\n```\n  \n**Params**  \n- `string[]` vals: values to add to the end of the array"
        }
      },
      "sortText": "AD",
      "filterText": "push",
      "insertText": "push(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "filter(function (array:Type val) returns boolean func)",
      "kind": "Function",
      "detail": "string[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nSelects the members from an array for which a function returns true.\n\n```ballerina\nint[] numbers = [12, 43, 60, 75, 10];\nnumbers.filter(n => n > 50) ⇒ [60,75]\n```\n  \n**Params**  \n- `function (array:Type val) returns boolean` func: a predicate to apply to each member to test whether it should be selected  \n  \n**Return** `string[]`   \n- new array only containing members of parameter `arr` for which parameter `func` evaluates to true  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "filter",
      "insertText": "filter(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "lastIndexOf(string val, int startIndex)",
      "kind": "Function",
      "detail": "int?",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nReturns the index of last member of an array that is equal to a given value if there is one.\nReturns `()` if not found.\nEquality is tested using `==`.\n\n```ballerina\nstring[] strings = [\"a\", \"b\", \"d\", \"b\", \"d\", \"b\"];\nstrings.lastIndexOf(\"e\") is () ⇒ true\nstrings.lastIndexOf(\"b\") ⇒ 5\nstrings.lastIndexOf(\"b\", strings.length() - 2) ⇒ 3\n```\n  \n**Params**  \n- `string` val: member to search for  \n- `int` startIndex: index to start searching backwards from(Defaultable)  \n  \n**Return** `int?`   \n- index of the member if found, else `()`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "lastIndexOf",
      "insertText": "lastIndexOf(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "setLength(int length)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nChanges the length of an array.\n\n`setLength(arr, 0)` is equivalent to `removeAll(arr)`.\n\n```ballerina\nint[] numbers = [2, 4, 6, 8];\nnumbers.setLength(2);\nnumbers ⇒ [2,4]\nnumbers.setLength(0);\nnumbers ⇒ []\n```\n  \n**Params**  \n- `int` length: new length"
        }
      },
      "sortText": "AD",
      "filterText": "setLength",
      "insertText": "setLength(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "unshift(string... vals)",
      "kind": "Function",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.array:0.0.0_  \n  \nAdds values to the start of an array.\n\nThe values newly added to the array will be in the same order\nas they are in parameter `vals`.\n\n```ballerina\nint[] numbers = [14];\nnumbers.unshift(10, 12);\nnumbers ⇒ [10,12,14]\nint[] moreNumbers = [2, 4, 6, 8];\nnumbers.unshift(...moreNumbers);\nnumbers ⇒ [2,4,6,8,10,12,14]\n```\n  \n**Params**  \n- `string[]` vals: values to add to the start of the array"
        }
      },
      "sortText": "AD",
      "filterText": "unshift",
      "insertText": "unshift(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneWithType(typedesc<anydata> t)",
      "kind": "Function",
      "detail": "t|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConstructs a value with a specified type by cloning another value.\n\nWhen parameter `v` is a structural value, the inherent type of the value to be constructed\ncomes from parameter `t`. When parameter `t` is a union, it must be possible to determine which\nmember of the union to use for the inherent type by following the same rules\nthat are used by list constructor expressions and mapping constructor expressions\nwith the contextually expected type. If not, then an error is returned.\nThe `cloneWithType` operation is recursively applied to each member of parameter `v` using\nthe type descriptor that the inherent type requires for that member.\n\nLike the Clone abstract operation, this does a deep copy, but differs in\nthe following respects:\n- the inherent type of any structural values constructed comes from the specified\ntype descriptor rather than the value being constructed\n- the read-only bit of values and fields comes from the specified type descriptor\n- the graph structure of `v` is not preserved; the result will always be a tree;\nan error will be returned if `v` has cycles\n- immutable structural values are copied rather being returned as is; all\nstructural values in the result will be mutable.\n- numeric values can be converted using the NumericConvert abstract operation\n- if a record type descriptor specifies default values, these will be used\nto supply any missing members\n\n```ballerina\nanydata[] arr = [1, 2, 3, 4];\nint[] intArray = check arr.cloneWithType();\nintArray ⇒ [1,2,3,4]\narr === intArray ⇒ false\ntype Vowels string:Char[];\nstring[] vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\nvowels.cloneWithType(Vowels) ⇒ [\"a\",\"e\",\"i\",\"o\",\"u\"]\nvowels.cloneWithType(string) ⇒ error\n```\n  \n**Params**  \n- `typedesc<anydata>` t: the type for the cloned to be constructed(Defaultable)  \n  \n**Return** `t|error`   \n- a new value that belongs to parameter `t`, or an error if this cannot be done  \n  \n"
        }
      },
      "sortText": "BD",
      "filterText": "cloneWithType",
      "insertText": "cloneWithType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cloneReadOnly()",
      "kind": "Function",
      "detail": "value:CloneableType & readonly",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns a clone of a value that is read-only, i.e., immutable.\n\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n\n```ballerina\nint[] arr = [1, 2, 3, 4];\nint[] & readonly immutableClone = arr.cloneReadOnly();\nimmutableClone ⇒ [1,2,3,4]\nimmutableClone is readonly ⇒ true \n```\n  \n  \n  \n**Return** `value:CloneableType & readonly`   \n- immutable clone of parameter `v`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "cloneReadOnly",
      "insertText": "cloneReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toBalString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConverts a value to a string that describes the value in Ballerina syntax.\n\nIf parameter `v` is anydata and does not have cycles, then the result will\nconform to the grammar for a Ballerina expression and when evaluated\nwill result in a value that is == to parameter `v`.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the expression style.\n\n```ballerina\ndecimal value = 12.12d;\nvalue.toBalString() ⇒ 12.12d\nanydata[] data = [1, \"Sam\", 12.3f, 12.12d, {value: 12}];\ndata.toBalString() ⇒ [1,\"Sam\",12.3,12.12d,{\"value\":12}]\n```\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toBalString",
      "insertText": "toBalString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJson()",
      "kind": "Function",
      "detail": "json",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConverts a value of type `anydata` to `json`.\n\nThis does a deep copy of parameter `v` converting values that do\nnot belong to json into values that do.\nA value of type `xml` is converted into a string as if\nby the `toString` function.\nA value of type `table` is converted into a list of\nmappings one for each row.\nThe inherent type of arrays in the return value will be\n`json[]` and of mappings will be `map<json>`.\nA new copy is made of all structural values, including\nimmutable values.\nThis panics if parameter `v` has cycles.\n\n```ballerina\nanydata student = {name: \"Jo\", age: 11};\nstudent.toJson() ⇒ {\"name\":\"Jo\",\"age\":11}\nanydata[] array = [];\narray.push(array);\narray.toJson() ⇒ panic\n```\n  \n  \n  \n**Return** `json`   \n- representation of `v` as value of type json  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toJson",
      "insertText": "toJson()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "isReadOnly()",
      "kind": "Function",
      "detail": "boolean",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nTests whether a value is read-only, i.e., immutable.\n\nReturns true if read-only, false otherwise.\n\n```ballerina\nint[] scores = <readonly> [21, 12, 33, 45, 81];\nscores.isReadOnly() ⇒ true\nstring[] sports = [\"cricket\", \"football\", \"rugby\"];\nsports.isReadOnly() ⇒ false\n```\n  \n  \n  \n**Return** `boolean`   \n- true if read-only, false otherwise  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "isReadOnly",
      "insertText": "isReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "fromJsonWithType(typedesc<anydata> t)",
      "kind": "Function",
      "detail": "t|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nConverts a value of type json to a user-specified type.\n\nThis works the same as function `cloneWithType`,\nexcept that it also does the inverse of the conversions done by `toJson`.\n\n```ballerina\njson arr = [1, 2, 3, 4];\nint[] intArray = check arr.fromJsonWithType();\nintArray ⇒ [1,2,3,4]\ntype Vowels string:Char[];\njson vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\nvowels.fromJsonWithType(Vowels) ⇒ [\"a\",\"e\",\"i\",\"o\",\"u\"]\nvowels.fromJsonWithType(string) ⇒ error\n```\n  \n**Params**  \n- `typedesc<anydata>` t: type to convert to(Defaultable)  \n  \n**Return** `t|error`   \n- value belonging to type parameter `t` or error if this cannot be done  \n  \n"
        }
      },
      "sortText": "BD",
      "filterText": "fromJsonWithType",
      "insertText": "fromJsonWithType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "mergeJson(json j2)",
      "kind": "Function",
      "detail": "json|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nMerges two `json` values.\n\nThe merge of parameter `j1` with parameter `j2` is defined as follows:\n- if parameter `j1` is `()`, then the result is parameter `j2`\n- if parameter `j2` is `()`, then the result is parameter `j1`\n- if parameter `j1` is a mapping and parameter `j2` is a mapping, then for each entry [k, j] in parameter `j2`, set `j1[k]` to the merge of `j1[k]` with `j`\n- if `j1[k]` is undefined, then set `j1[k]` to `j`\n- if any merge fails, then the merge of parameter `j1` with parameter `j2` fails\n- otherwise, the result is parameter `j1`.\n- otherwise, the merge fails\nIf the merge fails, then parameter `j1` is unchanged.\n\n```ballerina\njson student = {name: \"John\", age: 23};\njson location = {city: \"Colombo\", country: \"Sri Lanka\"};\nstudent.mergeJson(location) ⇒ {\"name\":\"John\",\"age\":23,\"city\":\"Colombo\",\"country\":\"Sri Lanka\"}\nvalue:mergeJson(student, location) ⇒ {\"name\":\"John\",\"age\":23,\"city\":\"Colombo\",\"country\":\"Sri Lanka\"}\njson city = \"Colombo\";\nstudent.mergeJson(city) ⇒ error\n```\n  \n**Params**  \n- `json` j2: json value  \n  \n**Return** `json|error`   \n- the merge of parameter `j1` with parameter `j2` or an error if the merge fails  \n  \n"
        }
      },
      "sortText": "BD",
      "filterText": "mergeJson",
      "insertText": "mergeJson(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "clone()",
      "kind": "Function",
      "detail": "value:CloneableType",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns a clone of a value.\n\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n\n```ballerina\nint[] arr = [1, 2, 3, 4];\nint[] clone = arr.clone();\nclone ⇒ [1,2,3,4]\narr === clone ⇒ false\n```\n  \n  \n  \n**Return** `value:CloneableType`   \n- clone of parameter `v`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "clone",
      "insertText": "clone()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ensureType(typedesc<any> t)",
      "kind": "Function",
      "detail": "t|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nSafely casts a value to a type.\n\nThis casts a value to a type in the same way as a type cast expression,\nbut returns an error if the cast cannot be done, rather than panicking.\n\n```ballerina\njson student = {name: \"Jo\", subjects: [\"CS1212\", \"CS2021\"]};\njson[] subjects = check student.subjects.ensureType();\nsubjects ⇒ [\"CS1212\",\"CS2021\"]\nanydata vowel = \"I\";\nvowel.ensureType(string:Char) ⇒ I;\nvowel.ensureType(int) ⇒ error\n```\n  \n**Params**  \n- `typedesc<any>` t: a typedesc for the type to which to cast it(Defaultable)  \n  \n**Return** `t|error`   \n- `v` cast to the type described by parameter `t`, or an error, if the cast cannot be done  \n  \n"
        }
      },
      "sortText": "BD",
      "filterText": "ensureType",
      "insertText": "ensureType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "toString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nPerforms a direct conversion of a value to a string.\n\nThe conversion is direct in the sense that when applied to a value that is already\na string it leaves the value unchanged.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the direct style.\n\n```ballerina\ndecimal value = 12.12d;\nvalue.toString() ⇒ 12.12\nanydata[] data = [1, \"Sam\", 12.3f, 12.12d, {value: 12}];\ndata.toString() ⇒ [1,\"Sam\",12.3,12.12,{\"value\":12}]\n```\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toString",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toJsonString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the string that represents a anydata value in JSON format.\n\nparameter `v` is first converted to `json` as if by the function `toJson`.\n\n```ballerina\nanydata marks = {\"Alice\": 90, \"Bob\": 85, \"Jo\": 91};\nmarks.toJsonString() ⇒ {\"Alice\":90, \"Bob\":85, \"Jo\":91}\n```\n  \n  \n  \n**Return** `string`   \n- string representation of parameter `v` converted to `json`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toJsonString",
      "insertText": "toJsonString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "last(value:Type... vs)",
      "kind": "Function",
      "detail": "value:Type",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the last argument.\n\n```ballerina\nvalue:last(1, 2, 3) ⇒ 3\n```\n  \n**Params**  \n- `value:Type[]` vs: rest of the arguments  \n  \n**Return** `value:Type`   \n- last argument  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "last",
      "insertText": "last(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "count(any|error... vs)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the number of arguments.\n\n```ballerina\nvalue:count(1, 2, 3) ⇒ 3\n```\n  \n  \n  \n**Return** `int`   \n- number of arguments  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "count",
      "insertText": "count(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "first(any|error... vs)",
      "kind": "Function",
      "detail": "value:Type",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the first argument.\n\n```ballerina\nvalue:first(1, 2, 3) ⇒ 1\n```\n  \n**Params**  \n- `(any|error)[]` vs: rest of the arguments  \n  \n**Return** `value:Type`   \n- first argument  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "first",
      "insertText": "first(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
