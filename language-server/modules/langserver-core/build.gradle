/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'javaProjectWithExtBala'
    id 'ballerinaLangLibLoad'
}

configurations.all {
    resolutionStrategy {
        preferProjectModules()
    }
}

configurations {
    dist {
        transitive false
    }
    dependency {
        transitive false
    }
    lib
    distributionBala
    tests {
        transitive true
    }
}

dependencies {
    dist project(':ballerina-rt')
    implementation project(':ballerina-tools-api')
    implementation project(':ballerina-lang')
    implementation project(':ballerina-parser')
    implementation project(':ballerina-runtime')
    implementation project(':ballerina-parser')
    implementation project(':formatter:formatter-core')
    implementation project(':central-client')
    implementation project(':diagram-util')
    implementation project(':syntax-api-calls-gen')
    implementation project(':language-server:language-server-commons')
    implementation project(':toml-parser')

    // Standard libs
    implementation project(':ballerina-lang:annotations')
    implementation project(':language-server:language-server-stdlib')

    implementation libs.jackson.databind
    implementation libs.jackson.dataformat.yaml
    implementation libs.netty.buffer
    implementation libs.slf4j.jdk14
    implementation libs.findbugs.jsr305
    implementation (libs.eclipse.lsp4j) {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation (libs.eclipse.lsp4j.jsonrpc) {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation libs.apache.commons.lang3
    implementation libs.commons.io
    implementation libs.guava
    implementation libs.toml4j

    distributionBala project(path: ':language-server:language-server-stdlib', configuration: 'distributionBala')

    dependency libs.eclipse.lsp4j
    dependency libs.eclipse.lsp4j.jsonrpc
    dependency libs.commons.io
    dependency libs.guava

    testImplementation libs.testng
    testImplementation libs.mockito.core
    testImplementation libs.mockito.testng
    testImplementation libs.awaitility
}

description = 'Ballerina - Language server - Core'

// Fix for windows class path too long issue
tasks.register('pathingJar', Jar) {
    archiveAppendix = "pathing"
    doFirst {
        manifest {
            attributes "Class-Path": sourceSets.main.runtimeClasspath.files.collect {
                it.toURL().toString().replaceFirst("file:/", "/")
            }.join(' ')
        }
    }
}

tasks.register('clearPathingJar', Delete) {
    delete pathingJar.archiveFile
}

tasks.register('createZip', Zip) {
    dependsOn createBalHome
}

tasks.register('testJar', Jar) {
    dependsOn testClasses
    archiveBaseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

artifacts {
    dist file: file(createZip.archiveFile), builtBy: createZip
    lib configurations.dependency.files
    
    tests testJar
}

compileJava {
    doFirst {
        options.compilerArgs << '--module-path' << classpath.asPath
        classpath = files()
    }
}

javadoc {
    doFirst {
        logger.info(classpath.toList().toString())
        options.modulePath = classpath.toList()
        classpath = files()
    }
}

tasks.register('deleteGeneratedModules', Delete) {
    delete 'build/resources/test/command/generate-module-for-client-decl/source/client_decl/generated'
}

// This is need for the run via ls (fast-run) feature to be tested.
tasks.register('copyRuntime') {
    dependsOn configurations.dist
    doFirst {
        configurations.dist.each { artifact ->
            copy {
                from artifact.getPath()
                into "$buildDir/bre/lib"
            }
        }
    }
}

test {
    dependsOn deleteGeneratedModules
    dependsOn loadDistributionCache
    dependsOn copyRuntime
    systemProperty "ballerina.home", "$buildDir/"
    systemProperty "experimental", "true"
    systemProperty "ballerina.version", project.version
    systemProperty "responseTimeThreshold", 2000
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

tasks.register('buildAndCopy', Copy) {
    dependsOn build
    from 'build/libs/language-server-core-' + project.version + '.jar'
    into project(':jballerina-tools').projectDir.absolutePath +
            '/build/extracted-distributions/jballerina-tools-' + project.version +
            '/bre/lib'
}

tasks.compileJava.dependsOn(':language-server:language-server-stdlib:copyInteropImports')
tasks.javadoc.dependsOn(":language-server:language-server-stdlib:copyInteropImports")
