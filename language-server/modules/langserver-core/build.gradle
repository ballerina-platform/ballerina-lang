/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProjectWithExtBala.gradle"
apply from: "$rootDir/gradle/ballerinaLangLibLoad.gradle"

configurations.all {
    resolutionStrategy {
        preferProjectModules()
    }
}

configurations {
    dist {
        transitive false
    }
    dependency {
        transitive false
    }
    libs
    distributionBala
    tests {
        transitive true
    }
}

dependencies {
    implementation project(':ballerina-tools-api')
    implementation project(':ballerina-lang')
    implementation project(':ballerina-parser')
    implementation project(':ballerina-runtime')
    implementation project(':ballerina-parser')
    implementation project(':formatter:formatter-core')
    implementation project(':central-client')
    implementation project(':diagram-util')
    implementation project(':syntax-api-calls-gen')
    implementation project(':language-server:language-server-commons')
    implementation project(':toml-parser')

    // Standard libs
    implementation project(':ballerina-lang:annotations')
    implementation project(':language-server:language-server-stdlib')

    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'io.netty:netty-buffer'
    implementation 'org.slf4j:slf4j-jdk14'
    implementation 'com.google.code.findbugs:jsr305'
    implementation ('org.eclipse.lsp4j:org.eclipse.lsp4j') {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation ('org.eclipse.lsp4j:org.eclipse.lsp4j.jsonrpc') {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation 'org.apache.commons:commons-lang3'
    implementation 'commons-io:commons-io'
    implementation "com.google.guava:guava:${project.guavaVersion}"
    implementation 'com.moandjiezana.toml:toml4j'

    distributionBala project(path: ':language-server:language-server-stdlib', configuration: 'distributionBala')

    dependency "org.eclipse.lsp4j:org.eclipse.lsp4j:${project.eclipseLsp4jVersion}"
    dependency "org.eclipse.lsp4j:org.eclipse.lsp4j.jsonrpc:${project.eclipseLsp4jJsonrpcVersion}"
    dependency "commons-io:commons-io:${project.commonsIoVersion}"
    dependency "com.google.guava:guava:${project.guavaVersion}"
    
    testCompile 'org.testng:testng'
}

description = 'Ballerina - Language server - Core'

// Fix for windows class path too long issue
task pathingJar(type: Jar) {
    appendix = "pathing"
    doFirst {
        manifest {
            attributes "Class-Path": sourceSets.main.runtimeClasspath.files.collect {
                it.toURL().toString().replaceFirst("file:/", "/")
            }.join(' ')
        }
    }
}

task clearPathingJar(type: Delete) {
    delete pathingJar.archiveFile
}

task createZip(type: Zip) {
    dependsOn createBalHome
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

artifacts {
    dist file: file(createZip.archiveFile), builtBy: createZip
    libs configurations.dependency.files
    
    tests testJar
}

createJavadoc {
    // TODO: remove following, it fails at org.eclipse currently
    exclude "**"
}

test {
    dependsOn loadDistributionCache
    systemProperty "ballerina.home", "$buildDir/"
    systemProperty "experimental", "true"
    systemProperty "ballerina.version", project.version
    systemProperty "responseTimeThreshold", 2000
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

task buildAndCopy(type: Copy) {
    dependsOn build
    from 'build/libs/language-server-core-' + project.version + '.jar'
    into project(':jballerina-tools').projectDir.absolutePath +
            '/build/extracted-distributions/jballerina-tools-' + project.version +
            '/bre/lib'
}
