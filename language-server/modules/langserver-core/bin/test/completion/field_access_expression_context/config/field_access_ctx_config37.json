{
  "position": {
    "line": 1,
    "character": 27
  },
  "source": "field_access_expression_context/source/field_access_ctx_source31.bal",
  "description": "",
  "items": [
    {
      "label": "ensureType(typedesc<any> t)",
      "kind": "Function",
      "detail": "t|error",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nSafely casts a value to a type.\n\nThis casts a value to a type in the same way as a type cast expression,\nbut returns an error if the cast cannot be done, rather than panicking.\n\n```ballerina\njson student = {name: \"Jo\", subjects: [\"CS1212\", \"CS2021\"]};\njson[] subjects = check student.subjects.ensureType();\nsubjects ⇒ [\"CS1212\",\"CS2021\"]\nanydata vowel = \"I\";\nvowel.ensureType(string:Char) ⇒ I;\nvowel.ensureType(int) ⇒ error\n```\n  \n**Params**  \n- `typedesc<any>` t: a typedesc for the type to which to cast it(Defaultable)  \n  \n**Return** `t|error`   \n- `v` cast to the type described by parameter `t`, or an error, if the cast cannot be done  \n  \n"
        }
      },
      "sortText": "BD",
      "filterText": "ensureType",
      "insertText": "ensureType(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "cause()",
      "kind": "Function",
      "detail": "error?",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error:0.0.0_  \n  \nReturns the error's cause.\n\n```ballerina\nerror fileNotFoundError = error(\"file not found\", file = \"test.bal\");\nfileNotFoundError.cause() is () ⇒ true\nerror ioError = error(\"IO error\", fileNotFoundError);\nioError.cause() ⇒ error(\"file not found\",file=\"test.bal\")\n```\n  \n  \n  \n**Return** `error?`   \n- error cause  \n  \n"
        }
      },
      "sortText": "AD",
      "filterText": "cause",
      "insertText": "cause()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toBalString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error:0.0.0_  \n  \nConverts an error to a string that describes the value in Ballerina syntax.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the expression style.\n\n```ballerina\nerror(\"invalid salary\", value = 0d).toBalString() ⇒ error(\"invalid salary\",value=0d)\n```\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toBalString",
      "insertText": "toBalString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "toString()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error:0.0.0_  \n  \nConverts an error to a string.\n\nThe details of the conversion are specified by the ToString abstract operation\ndefined in the Ballerina Language Specification, using the direct style.\n\n```ballerina\nerror(\"invalid salary\", value = 0d).toString() ⇒ error(\"invalid salary\",value=0)\n```\n  \n  \n  \n**Return** `string`   \n- a string resulting from the conversion  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "toString",
      "insertText": "toString()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "detail()",
      "kind": "Function",
      "detail": "error:DetailType & readonly",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error:0.0.0_  \n  \nReturns the error's detail record.\n\n```ballerina\nerror(\"file not found\", file = \"test.bal\").detail() ⇒ {\"file\":\"test.bal\"}\n```\n\nThe returned value will be immutable.  \n  \n  \n**Return** `error:DetailType & readonly`   \n- error detail value  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "detail",
      "insertText": "detail()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "stackTrace()",
      "kind": "Function",
      "detail": "error:StackFrame[]",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error:0.0.0_  \n  \nReturns an object representing the stack trace of the error.\n\n```ballerina\nerror(\"IO error\").stackTrace() ⇒ [callableName: main  fileName: test.bal lineNumber: 5]\n```\n  \n  \n  \n**Return** `error:StackFrame[]`   \n- a new object representing the stack trace of the error value  \nThe first member of the array represents the top of the call stack.  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "stackTrace",
      "insertText": "stackTrace()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "message()",
      "kind": "Function",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.error:0.0.0_  \n  \nReturns the error's message.\n\n```ballerina\nerror(\"IO error\").message() ⇒ IO error\n```\n  \n  \n  \n**Return** `string`   \n- error message  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "message",
      "insertText": "message()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cloneReadOnly()",
      "kind": "Function",
      "detail": "value:CloneableType & readonly",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns a clone of a value that is read-only, i.e., immutable.\n\nIt corresponds to the ImmutableClone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n\n```ballerina\nint[] arr = [1, 2, 3, 4];\nint[] & readonly immutableClone = arr.cloneReadOnly();\nimmutableClone ⇒ [1,2,3,4]\nimmutableClone is readonly ⇒ true \n```\n  \n  \n  \n**Return** `value:CloneableType & readonly`   \n- immutable clone of parameter `v`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "cloneReadOnly",
      "insertText": "cloneReadOnly()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "clone()",
      "kind": "Function",
      "detail": "value:CloneableType",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns a clone of a value.\n\nA clone is a deep copy that does not copy immutable subtrees.\nA clone can therefore safely be used concurrently with the original.\nIt corresponds to the Clone(v) abstract operation,\ndefined in the Ballerina Language Specification.\n\n```ballerina\nint[] arr = [1, 2, 3, 4];\nint[] clone = arr.clone();\nclone ⇒ [1,2,3,4]\narr === clone ⇒ false\n```\n  \n  \n  \n**Return** `value:CloneableType`   \n- clone of parameter `v`  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "clone",
      "insertText": "clone()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "last(value:Type... vs)",
      "kind": "Function",
      "detail": "value:Type",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the last argument.\n\n```ballerina\nvalue:last(1, 2, 3) ⇒ 3\n```\n  \n**Params**  \n- `value:Type[]` vs: rest of the arguments  \n  \n**Return** `value:Type`   \n- last argument  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "last",
      "insertText": "last(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "count(any|error... vs)",
      "kind": "Function",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the number of arguments.\n\n```ballerina\nvalue:count(1, 2, 3) ⇒ 3\n```\n  \n  \n  \n**Return** `int`   \n- number of arguments  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "count",
      "insertText": "count(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "first(any|error... vs)",
      "kind": "Function",
      "detail": "value:Type",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/lang.value:0.0.0_  \n  \nReturns the first argument.\n\n```ballerina\nvalue:first(1, 2, 3) ⇒ 1\n```\n  \n**Params**  \n- `(any|error)[]` vs: rest of the arguments  \n  \n**Return** `value:Type`   \n- first argument  \n  \n"
        }
      },
      "sortText": "CD",
      "filterText": "first",
      "insertText": "first(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
