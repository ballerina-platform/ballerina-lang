NAME
       ballerina-build - Build the Ballerina package and generate an executable

SYNOPSIS
       bal build
       bal build <ballerina-file-path> 
       bal build <ballerina-package-path>
       bal build [--test-report] [--offline] [--experimental] [-o | --output] <output-path> 
                  <ballerina-file-path> 
       bal build [-c | --compile] [--offline] [experimental] [--cloud] [--observability-included] 
                 [--skip-tests] [--list-conflicted-classes] <ballerina-package-path> 
       bal build [-c | --compile] [--offline] [experimental] [--cloud] [--observability-included] 
                 [--list-conflicted-classes] [--debug]  [--test-report] [--code-coverage] 
                 <ballerina-package-path>
         

DESCRIPTION
       Compile Ballerina sources and produce the executable JAR file. However, 
       if the package does not contain an entry point, it will produce a non-executable
       JAR file, which can be used in another package/program.

       Building a Ballerina package creates the executable `.jar` file
       in the `<package-root>/target/bin` directory.

       Building a single Ballerina file will create an executable `.jar` file in the
       current directory. The name of the executable file will be
       `<ballerina-file-name>.jar`.


OPTIONS
       -o <output>, --output <output>
           Write the output to the given file. The provided output
           file name may or may not contain the ‘.jar’ extension. The -o flag will only work
           for single files.

       -c, --compile
           Compile the source and generate the Ballerina archive (.bala)
           without generating the executable.

       --offline
            Build offline using the local artifacts without downloading the latest artifacts of 
            the dependencies from the remote repository (Ballerina Central).

       --skip-tests
           Skip test compilation and execution.

       --experimental
           Enable experimental language features.

       --code-coverage
           Enable code coverage. This will analyze the line coverage of the
           source `.bal` files in the Ballerina package and add a section
           to the testerina report with the code coverage details. This feature is not supported
           with single BAL file executions.

       --test-report
           Generate an HTML report containing the test results. Defaults to 'true'
           if code coverage is enabled.

       --debug
           Run tests in remote debugging mode only when the '--skip-tests' flag is not used.

       --observability-included
           Include the dependencies and artifacts in the  executable JAR file(s) of a Ballerina 
           program that are required to enable the observability functionalities on it.

       --cloud
           Enable cloud artifact generation for cloud providers: (`--cloud=k8s`)for Kubernetes 
           and (`--cloud=docker`) for Docker.

       --list-conflicted-classes
       		List the conflicting classes of conflicting JARs in the project.


EXAMPLES
       Build the 'hello' package that has an entry point. This will generate a
        `hello.jar` file in the '<package-root>/target/bin' directory.
          $ bal build
       
       Compile a Ballerina source file and create an executable JAR.
          $ bal build hello.bal

       Build the 'hello' library package with '--compile'/'-c' flag. This will
       generate the `<org-name>-<package-name>-<version>-<platform>.bala` file in 
       the '<package-root>/target/bala' directory.
          $ bal build -c

       Build the 'hello' package from a different directory location.
          $ bal build `<hello-package-path>`

       Build the current package and generate the test report. This will generate an
       HTML test report in addition to the executable JAR files.
          $ bal build --test-report

       Build the current package and generate the test report with
       the code coverage information. This will add an additional section
       to the test report for code coverage information.
          $ bal build --code-coverage
