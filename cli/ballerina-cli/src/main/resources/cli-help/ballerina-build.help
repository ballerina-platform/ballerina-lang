NAME
       ballerina-build - Build the Ballerina package or standalone file and generate an executable

SYNOPSIS
       bal build
       bal build <ballerina-file-path>
       bal build <ballerina-package-path>
       bal build [--target-dir] <target-directory-path>
       bal build [--offline] [--experimental] [-o | --output] <output-path> <ballerina-file-path>
       bal build [--offline] [--experimental] [--cloud] [--observability-included]
                 [--list-conflicted-classes] <ballerina-package-path>


DESCRIPTION
       Compile Ballerina sources and produce the executable JAR file. However,
       if the package does not contain an entry point, it will produce a non-executable
       JAR file, which can be used in another package/program.

       Building a Ballerina package creates the executable `.jar` file
       in the `<package-root>/target/bin` directory.

       Building a standalone Ballerina file will create an executable `.jar` file in the
       current directory. The name of the executable file will be
       <ballerina-file-name>.jar'.

       Note: Building `.bal` files, which belong to a Ballerina package is not allowed.


OPTIONS
       -o, --output <output>
           Write the output to the given file. The provided output
           file name may or may not contain the ‘.jar’ extension. The -o flag will only work
           for standalone Ballerina files.

       --offline
            Build offline using the local artifacts without downloading the latest artifacts of
            the dependencies from the remote repository (Ballerina Central).

       --sticky
       		Disable automatic updates.
       		This will stick to the exact versions locked in the
       		'Dependencies.toml' file (if exists).

       --experimental
           Enable experimental language features.

       --observability-included
           Include the dependencies and artifacts that are required to enable the observability functionalities
           in the  executable JAR file.

       --cloud <provider>
           Enable cloud artifact generation for cloud providers: (`--cloud=k8s`) for Kubernetes
           and (`--cloud=docker`) for Docker.

       --list-conflicted-classes
       		List the conflicting classes of conflicting JARs in the package.

       --target-dir <directory-path>
           Target directory path. The directory path can be absolute or relative.

       --export-openapi
           Generate openAPI contract files for all the services in the current package.

EXAMPLES
       Build the 'hello' package that has an entry point. This will generate a
       'hello.jar' file in the '<package-root>/target/bin' directory.
          $ bal build

       Build a standalone Ballerina file and create an executable JAR. This will generate a
       'hello.jar' file in the present working directory. The file path can be relative or absolute.
          $ bal build hello.bal

       Build the 'hello' package from a different directory location.
       The file path can be relative or absolute.
          $ bal build `<hello-package-path>`
