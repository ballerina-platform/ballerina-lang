/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProject.gradle"
apply from: "$rootDir/gradle/ballerinaLangLibLoad.gradle"

configurations {
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-simple'
    testImplementation.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
    compilerPluginJar {
        transitive false
    }
    distributionBala
    distributionBirJar
    balRt
    testRt
    testCore
}

dependencies {

    implementation project(':ballerina-lang')
    implementation project(':ballerina-runtime')
    implementation project(':ballerina-tools-api')
    implementation project(':central-client')
    implementation 'info.picocli:picocli'
    implementation "org.apache.commons:commons-compress:${project.apacheCommonsCompressVersion}"
    implementation "com.google.code.gson:gson:${project.gsonVersion}"
    implementation project(':docerina')
    implementation project(':testerina:testerina-core')
    implementation project(':testerina:testerina-runtime')
    implementation project(':maven-resolver')
    implementation project(':ballerina-shell:shell-cli')
    implementation project(':toml-parser')
    implementation project(':identifier-util')
    testImplementation project(':ballerina-test-utils')
    implementation 'org.ow2.asm:asm'
    implementation "org.ow2.asm:asm-commons:${project.ow2AsmCommonsVersion}"
    implementation "org.jacoco:org.jacoco.core:${project.jacocoVersion}"
    implementation "org.jacoco:org.jacoco.report:${project.jacocoVersion}"
    implementation group: 'org.jacoco', name: 'org.jacoco.core', version: "${project.jacocoVersion}"
    implementation group: 'org.jacoco', name: 'org.jacoco.report', version: "${project.jacocoVersion}"
    implementation group: 'org.ow2.asm', name: 'asm', version: "${project.ow2AsmVersion}"
    implementation group: 'org.ow2.asm', name: 'asm-commons', version: "${project.ow2AsmCommonsVersion}"
    implementation group: 'org.ow2.asm', name: 'asm-tree', version: "${project.ow2AsmTreeVersion}"
    implementation 'commons-io:commons-io'

    testImplementation "org.testng:testng:${project.testngVersion}"
    testImplementation "org.mockito:mockito-core:${project.mockitoCoreVersion}"
    testImplementation 'org.mockito:mockito-testng'
    testImplementation 'commons-io:commons-io'
    testImplementation "commons-codec:commons-codec:${project.commonsCodecVersion}"
    testImplementation "org.jline:jline:${project.jlineVersion}"

    distributionBala project(path: ':ballerina-langlib:test', configuration: 'distributionBala')
    distributionBala project(path: ':testerina:testerina-core', configuration: 'distributionBala')
    distributionBirJar project(path: ':testerina:testerina-core', configuration: 'distributionBirJar')

    testRuntimeOnly project(":ballerina-lang-test")
    balRt project(':ballerina-rt')
    testRt project(':ballerina-profiler')
    testRt project(':testerina:testerina-runtime')
    testCore project(':testerina:testerina-core')
    testRuntimeOnly project(':project-api-test-artifact:simple-code-gen-plugin-with-resource-gen')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-modifier')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-generator')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-analyzer')
    testRuntimeOnly project(':project-api-test-artifact:sample-openapi-build-tool')

    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-modifier')
    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-generator')
    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-analyzer')
    compilerPluginJar project(':project-api-test-artifact:init-function-code-modify-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:diagnostic-utils-lib')
}

task createTestDistributionCache(type: Copy) {
    dependsOn configurations.distributionBala
    from configurations.distributionBala
    into "$buildDir/repo"
}

task copyCompilerPluginJars(type: Copy) {
    from configurations.compilerPluginJar
    into "$buildDir/compiler-plugin-jars"
}

task copyProfilerResources(type: Copy) {
    from project(':jballerina-tools').file('resources/profiler')
    into "$buildDir/resources/profiler"
}

task createTestBre(type: Copy) {
    from configurations.balRt
    from configurations.testRt
    from configurations.testCore
    from configurations.distributionBirJar
    into "$buildDir/bre/lib"
}

test {
    dependsOn createTestDistributionCache
    dependsOn createTestBre
    dependsOn copyCompilerPluginJars
    dependsOn copyProfilerResources

    systemProperty "ballerina.home", "$buildDir"

    useTestNG() {
        suites 'src/test/resources/testng.xml'
        if (!project.hasProperty("native.test")) {
            excludeGroups 'native'
        }
    }
}

description = 'Ballerina - CLI'

ext.moduleName = 'ballerina-cli'

compileJava {
    dependsOn ':testerina:testerina-core:copyInteropImports'
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}


tasks.compileJava.dependsOn(':testerina:testerina-core:copyInteropImports')
tasks.createJavadoc.dependsOn(':testerina:testerina-core:copyInteropImports')
