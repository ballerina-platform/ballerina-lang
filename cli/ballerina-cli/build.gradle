/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'javaProject'
    id 'ballerinaLangLibLoad'
}

configurations {
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-simple'
    testImplementation.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
    compilerPluginJar {
        transitive false
    }
    distributionBala
    distributionBirJar
    balRt
    testRt
    testCore
}

dependencies {

    implementation project(':ballerina-lang')
    implementation project(':ballerina-runtime')
    implementation project(':ballerina-tools-api')
    implementation project(':central-client')
    implementation libs.picocli
    implementation(libs.apache.commons.compress) {
        exclude group: 'commons-codec', module: 'commons-codec'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
    implementation libs.gson
    implementation project(':docerina')
    implementation project(':testerina:testerina-core')
    implementation project(':testerina:testerina-runtime')
    implementation project(':maven-resolver')
    implementation project(':ballerina-shell:shell-cli')
    implementation project(':toml-parser')
    implementation project(':identifier-util')
    testImplementation project(':ballerina-test-utils')
    implementation libs.ow2.asm
    implementation libs.ow2.asm.commons
    implementation libs.ow2.asm.tree
    implementation libs.jacoco.core
    implementation libs.jacoco.report
    implementation libs.commons.io

    testImplementation libs.testng
    testImplementation libs.mockito.core
    testImplementation libs.mockito.testng
    testImplementation libs.commons.io
    testImplementation libs.commons.codec
    testImplementation libs.jline

    distributionBala project(path: ':ballerina-langlib:test', configuration: 'distributionBala')
    distributionBala project(path: ':testerina:testerina-core', configuration: 'distributionBala')
    distributionBirJar project(path: ':testerina:testerina-core', configuration: 'distributionBirJar')

    testRuntimeOnly project(":ballerina-lang-test")
    balRt project(':ballerina-rt')
    testRt project(':ballerina-profiler')
    testRt project(':testerina:testerina-runtime')
    testCore project(':testerina:testerina-core')
    testRuntimeOnly project(':project-api-test-artifact:simple-code-gen-plugin-with-resource-gen')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-modifier')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-generator')
    testRuntimeOnly project(':project-api-test-artifact:log-creator-in-built-code-analyzer')
    testRuntimeOnly project(':project-api-test-artifact:sample-openapi-build-tool')

    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-modifier')
    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-generator')
    compilerPluginJar project(':project-api-test-artifact:log-creator-pkg-provided-code-analyzer')
    compilerPluginJar project(':project-api-test-artifact:init-function-code-modify-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:diagnostic-utils-lib')
}

tasks.register('createTestDistributionCache', Copy) {
    dependsOn configurations.distributionBala
    from configurations.distributionBala
    into "$buildDir/repo"
}

tasks.register('copyCompilerPluginJars', Copy) {
    from configurations.compilerPluginJar
    into "$buildDir/compiler-plugin-jars"
}

tasks.register('copyProfilerResources', Copy) {
    from project(':jballerina-tools').file('resources/profiler')
    into "$buildDir/resources/profiler"
}

tasks.register('createTestBre', Copy) {
    from configurations.balRt
    from configurations.testRt
    from configurations.testCore
    from configurations.distributionBirJar
    into "$buildDir/bre/lib"
}

test {
    dependsOn createTestDistributionCache
    dependsOn createTestBre
    dependsOn copyCompilerPluginJars
    dependsOn copyProfilerResources

    systemProperty "ballerina.home", "$buildDir"

    useTestNG() {
        suites 'src/test/resources/testng.xml'
        if (!project.hasProperty("native.test")) {
            excludeGroups 'native'
        }
    }
}

description = 'Ballerina - CLI'

ext.moduleName = 'ballerina-cli'

compileJava {
    dependsOn ':testerina:testerina-core:copyInteropImports'
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs << '--module-path' << classpath.asPath
        classpath = files()
    }
}

javadoc {
    doFirst {
        options.modulePath = classpath.toList()
        classpath = files()
    }
}


tasks.compileJava.dependsOn(':testerina:testerina-core:copyInteropImports')
tasks.javadoc.dependsOn(':testerina:testerina-core:copyInteropImports')
