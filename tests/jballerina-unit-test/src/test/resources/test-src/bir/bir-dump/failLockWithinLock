failLockWithinLock function() -> (int, string) {
    %0(RETURN) (int, string);
    %1(TEMP) typeDesc<any|error>;
    %2(SYNTHETIC) error|();
    %5(SYNTHETIC) error|();
    %8(SYNTHETIC) error|();
    %11(TEMP) boolean;
    %13(TEMP) error;
    %15(LOCAL) error;
    %17(TEMP) string;
    %19(TEMP) ();
    %20(TEMP) typeDesc<any|error>;
    %21(TEMP) map<ballerina/lang.value:0.0.0:Cloneable>;
    %22(TEMP) string;
    %23(TEMP) string;
    %24(TEMP) map<ballerina/lang.value:0.0.0:Cloneable>;
    %25(LOCAL) error;
    %41(TEMP) int;

    bb0 {
        %1 = newType (int, string);
        GOTO bb1;
    }
    bb1 {
        lock -> bb2;
    }
    bb2 {
        lockWithinLockInt = ConstLoad 50;
        lockWithinLockString = ConstLoad sample value;
        lock -> bb3;
    }
    bb3 {
        lockWithinLockString = ConstLoad second sample value;
        lockWithinLockInt = ConstLoad 99;
        lock -> bb4;
    }
    bb4 {
        lockWithinLockInt = ConstLoad 90;
        %8 = ConstLoad 0;
        GOTO bb5;
    }
    bb5 {
        unlock -> bb6;
    }
    bb6 {
        %11 = %8 is error;
        %11? bb7 : bb8;
    }
    bb7 {
        %13 = <error> %8;
        panic %13;
    }
    bb8 {
        %17 = ConstLoad custom error;
        %19 = ConstLoad 0;
        %13 = <error> %19;
        %20 = newType map<ballerina/lang.value:0.0.0:Cloneable>;
        %22 = ConstLoad message;
        %23 = ConstLoad error value;
        %21 = NewMap %20;
        %24 = cloneReadOnly(%21) -> bb9;
    }
    bb9 {
        %15 = error error(%17, %13, %24);
        GOTO bb10;
    }
    bb10 {
        unlock -> bb11;
    }
    bb11 {
        %25 = %15;
        lockWithinLockInt = ConstLoad 100;
        lockWithinLockString = ConstLoad Error caught;
        %19 = ConstLoad 0;
        GOTO bb16;
    }
    bb12 {
        %5 = ConstLoad 0;
        GOTO bb16;
    }
    bb13 {
        unlock -> bb14;
    }
    bb14 {
        %11 = %5 is error;
        %11? bb15 : bb16;
    }
    bb15 {
        %13 = <error> %5;
        panic %13;
    }
    bb16 {
        %2 = ConstLoad 0;
        GOTO bb17;
    }
    bb17 {
        unlock -> bb18;
    }
    bb18 {
        %11 = %2 is error;
        %11? bb19 : bb20;
    }
    bb19 {
        %13 = <error> %2;
        panic %13;
    }
    bb20 {
        %41 = ConstLoad 2;
        %0 = newArray %1[%41];
        GOTO bb21;
    }
    bb21 {
        return;
    }

    -------------------------------------------------------------
    | trapBB       | endBB        | targetBB     | errorOp      |
    -------------------------------------------------------------
    | bb2          | bb16         | bb17         | %2           |
    | bb3          | bb12         | bb13         | %5           |
    | bb4          | bb4          | bb5          | %8           |
    -------------------------------------------------------------
}