public globalVarsAndAnonFunctions function() -> () {
    %0(RETURN) ();
    %1(SYNTHETIC) map<any|error>;
    %2(TEMP) typeDesc<any|error>;
    %4(TEMP) any|error;
    %5(TEMP) int;
    %7(TEMP) string;
    %12(LOCAL) function(int) -> int;

    bb0 {
        %2 = newType map<any|error>;
        %1 = NewMap %2{};
        %5 = ConstLoad 3;
        %4 = <any|error> %5;
        %7 = ConstLoad a;
        %1[%7] = %4;
        %7 = ConstLoad b;
        %4 = <any|error> %7;
        %7 = ConstLoad l;
        %1[%7] = %4;
        %12 = fp $anon/.:0.0.0::$lambda$_0(%1);
        %0 = ConstLoad 0;
        GOTO bb1;
    }
    bb1 {
        return;
    }



     $lambda$_0 function(map<any|error>, int) -> int {
        %0(RETURN) int;
        %1(ARG) map<any|error>;
        %2(ARG) int;
        %3(LOCAL) int;
        %6(TEMP) int;
        %7(TEMP) boolean;
        %10(TEMP) [3];
        %12(TEMP) int;
        %14(TEMP) string;
        %16(TEMP) int;
        %18(LOCAL) string;
        %21(TEMP) string;

        bb0 {
            %3 = ConstLoad 34;
            %6 = ConstLoad 3;
            %7 = %2 == %6;
            %7? bb1 : bb2;
        }
        bb1 {
            %10 = <[3]> %2;
            %6 = <int> %10;
            %12 = %3 + %6;
            %14 = ConstLoad a;
            %6 = %1[%14];
            %16 = %12 + %6;
            %3 = %16 + globalA;
            GOTO bb2;
        }
        bb2 {
            %14 = ConstLoad l;
            %21 = %1[%14];
            %18 = s + %21;
            %14 = ConstLoad a;
            %12 = %1[%14];
            %0 = %3 + %12;
            GOTO bb3;
        }
        bb3 {
            return;
        }


    }
}
