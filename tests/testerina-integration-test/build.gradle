/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'base'
    id 'javaProject'
}

description = 'Ballerina - Testerina Test'

def extractedDist = "$buildDir/extractedDistribution/jballerina-tools-${project.version}"

configurations {
    jballerinaTools
    compilerPluginJar {
        transitive false
    }
}

dependencies {
    jballerinaTools project(path: ':jballerina-tools', configuration: 'zip')
    testImplementation libs.testng
    testImplementation libs.slf4j.jdk14
    testImplementation libs.gson
    implementation libs.picocli

    implementation project(path: ':ballerina-test-utils')
    implementation project(':ballerina-runtime')

    implementation libs.jacoco.core
    implementation libs.jacoco.report
    implementation libs.ow2.asm
    implementation libs.ow2.asm.commons
    implementation libs.ow2.asm.tree
    implementation libs.testng

    implementation libs.java.diff.utils

    compilerPluginJar project(':project-api-test-artifact:init-function-code-modify-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:remove-function-code-modify-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:add-remove-function-code-modify-compiler-plugin')
    compilerPluginJar project(':project-api-test-artifact:diagnostic-utils-lib')
}

jacoco {
    toolVersion = "${libs.versions.jacocoVersion.get()}"
}

tasks.register('copyCompilerPluginJars', Copy) {
    from configurations.compilerPluginJar
    into "$buildDir/compiler-plugin-jars"
}

tasks.register('extractDistribution', Copy) {
    dependsOn ':jballerina-tools:build'
    from zipTree(configurations.jballerinaTools.asPath)
    into "$buildDir/extractedDistribution"

}

tasks.register('testUtilsJar', Jar) {
    from sourceSets.test.runtimeClasspath
    include "org/ballerinalang/testerina/utils/**"
    archiveFileName = "interops.jar"
}

// Integration tests for testerina
test {
    mustRunAfter ':jballerina-integration-test:test'
    dependsOn extractDistribution
    dependsOn testUtilsJar
    dependsOn copyCompilerPluginJars
    systemProperty 'enableTesterinaTests', 'true'

    maxParallelForks = 1
    systemProperty 'basedir', "$buildDir"
    systemProperty 'libdir', "$buildDir"
    systemProperty 'server.zip', configurations.jballerinaTools.asPath
    systemProperty 'jballerina.server.zip', configurations.jballerinaTools.asPath
    systemProperty 'java.util.logging.config.file', "$buildDir/src/test/resources/logging.properties"

    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }

    jacoco.excludes = ["org.terasology.protobuf.*", "*MethodAccess", "*FieldAccess"]
}
