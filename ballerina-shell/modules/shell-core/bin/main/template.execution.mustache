{{#imports }}
    {{{.}}}
{{/imports}}

// Java methods: Memory
function __java_recall(handle context_id, handle name) returns any|error = @java:Method {
    name: "recall",
    'class: "{{{memoryRef}}}"
} external;
function __java_memorize(handle context_id, handle name, any|error value) = @java:Method {
    name: "memorize",
    'class: "{{{memoryRef}}}"
} external;
function __recall_any(string name) returns any {
    return checkpanic __java_recall(java:fromString("{{contextId}}"), java:fromString(name));
}
function __recall_any_error(string name) returns any|error {
    return __java_recall(java:fromString("{{contextId}}"), java:fromString(name));
}
function __memorize(string name, any|error value) {
    __java_memorize(java:fromString("{{contextId}}"), java:fromString(name), value);
}

// Module level declarations
{{#moduleDclns }}
    {{{.}}}
{{/moduleDclns}}

// Variable declarations
{{#varDclns}}
    {{^isNew }}
        {{#isAny }}
            {{{prefix}}} {{{typeLHS}}} {{{name}}} = <{{{type}}}> __recall_any("{{{encodedName}}}");
        {{/isAny}}
        {{^isAny }}
            {{{prefix}}} {{{typeLHS}}} {{{name}}} = <{{{type}}}> __recall_any_error("{{{encodedName}}}");
        {{/isAny}}
    {{/isNew}}
{{/varDclns}}
{{{lastVarDcln}}}

// Global expression variable (previous evaluation value)
any|error {{{exprVarName}}} = __recall_any_error("{{{exprVarName}}}");

// Handle statements/expressions
// We put statements separately to trap any panics
function __stmts() returns any {
    do {
        {{#lastStmts}}
            // Statement evaluation
            {{#statement}}
                if (0 < 1) {
                    {{{code}}}
                }
            {{/statement}}

            // Expression evaluation
            {{^statement}}
                {{{exprVarName}}} = (
                    {{{code}}}
                );
            {{/statement}}
        {{/lastStmts}}

        {{#noExpressions}}
            {{{exprVarName}}} = ();
        {{/noExpressions}}
    } on fail error e {
        {{{exprVarName}}} = ();
        return e.message() + " " + e.detail().toBalString();
    }
}

// This will execute the statement and initialize and save vars.
function __run() returns any {
    any|error retValue = trap __stmts();
    __memorize("{{{exprVarName}}}", {{{exprVarName}}});
    {{#varDclns}}
        __memorize("{{{encodedName}}}", {{{name}}});
    {{/varDclns}}
    return checkpanic retValue;
}

public function main() {
    _ = __run();
}
