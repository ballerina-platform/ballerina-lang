/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: "com.github.spotbugs"
apply plugin: 'jacoco'

apply from: "$rootDir/gradle/repositories.gradle"

ext.setProperty("grpcVersion", "1.27.2")
ext.setProperty("protobufVersion", "3.11.0")

dependencies {
    checkstyle project(':build-config:checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${project.puppycrawlCheckstyleVersion}"

    implementation "org.slf4j:slf4j-api:${project.slf4jApiVersion}"

    constraints {
        implementation "commons-codec:commons-codec:${project.commonsCodecVersion}"
        implementation "commons-io:commons-io:${project.commonsIoVersion}"
        implementation "commons-logging:commons-logging:${project.commonsLoggingVersion}"
        implementation "com.atlassian.commonmark:commonmark:${project.atalassianCommonmarkVersion}"
        implementation "com.atlassian.commonmark:commonmark-ext-gfm-tables:${project.atalassianCommonmarkExtGfmTablesVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${project.jacksonDatabindVersion}"
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.jacksonDataformatYamlVersion}"
        implementation "com.h2database:h2:${project.h2DatabaseVersion}"
        implementation "org.hsqldb:hsqldb:${project.hsqldbVersion}"
        implementation "com.github.chewiebug:gcviewer:${project.chewiebugGcviewerVersion}"
        implementation "com.github.jknack:handlebars:${project.jknackHandlebarsVersion}"
        implementation "com.google.protobuf:protobuf-java:${project.protobufJavaVersion}"
        implementation "com.google.code.findbugs:jsr305:${project.findbugsJsr305Version}"
        implementation "com.google.code.gson:gson:${project.gsonVersion}"
        implementation "com.google.guava:guava:${project.guavaVersion}"
        implementation "com.moandjiezana.toml:toml4j:${project.moandjiezanaToml4jVersion}"
        implementation "com.sun.mail:javax.mail:${project.javaxMailVersion}"
        implementation "com.squareup.okhttp3:okhttp:${project.okhttpVersion}"
        implementation "com.squareup.okio:okio:${project.squareupOkioVersion}"
        implementation "io.jaegertracing:jaeger-core:${project.jaegerCoreVersion}"
        implementation "io.jaegertracing:jaeger-thrift:${project.jaegerThriftVersion}"
        implementation "com.zaxxer:HikariCP:${project.hikariCPVersion}"
        implementation "io.grpc:grpc-protobuf:${project.ext.grpcVersion}"
        implementation "io.grpc:grpc-stub:${project.ext.grpcVersion}"
        implementation "io.grpc:grpc-netty-shaded:${project.ext.grpcVersion}"
        implementation "com.github.spullara.mustache.java:compiler:${project.mustacheJavaCompilerVersion}"
        implementation "org.bitbucket.cowwoc:diff-match-patch:${project.bitbucketCowwocVersion}"
        implementation "guru.nidi:graphviz-java:${project.guruNidiGraphvizVersion}"

        implementation "org.apache.commons:commons-lang3:${project.apacheCommonsLang3Version}"
        implementation "org.apache.commons:commons-text:${project.apacheCommonsTextVersion}"
        implementation "org.apache.geronimo.specs:geronimo-stax-api_1.0_spec:${project.apacheGeronimoStaxVersion}"
        implementation "org.apache.mina:mina-core:${project.apacheMinaCoreVersion}"
        implementation "org.apache.maven:maven-plugin-api:${project.apacheMavenPluginApiVersion}"
        implementation "org.apache.maven.plugin-tools:maven-plugin-annotations:${project.apacheMavenPluginAnnotationsVersion}"
        implementation "org.apache.ws.commons.axiom:axiom-api:${project.apacheCommonsAxiomApiVersion}"
        implementation "org.apache.ws.commons.axiom:axiom-impl:${project.apacheCommonsAxiomImplVersion}"
        implementation "org.apache.ws.commons.axiom:axiom-dom:${project.apacheCommonsAxiomDomVersion}"
        implementation "org.apache.ws.commons.axiom:axiom-c14n:${project.apacheCommonsAxiomC14nVersion}"
        implementation "org.apache.zookeeper:zookeeper:${project.apacheZookeeperVersion}"
        implementation "org.codehaus.woodstox:woodstox-core-asl:${project.codehausWoodstoxCoreAslVersion}"
        implementation "org.codehaus.woodstox:stax2-api:${project.codehausWoodstoxStax2ApiVersion}"
        implementation "org.awaitility:awaitility:${project.awaitilityVersion}"

        implementation "org.bouncycastle:bcprov-jdk15on:${project.bouncycastleVersion}"
        implementation "org.bouncycastle:bcpkix-jdk15on:${project.bouncycastleVersion}"
        implementation "org.bytedeco.javacpp-presets:llvm-platform:${project.bytedecoJavacppPlatformVersion}"
        implementation "org.codehaus.plexus:plexus-utils:${project.codehausPlexusUtilsVersion}"
        implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:${project.eclipseLsp4jVersion}"
        implementation "org.eclipse.lsp4j:org.eclipse.lsp4j.jsonrpc:${project.eclipseLsp4jJsonrpcVersion}"
        implementation "org.hdrhistogram:HdrHistogram:${project.hdrHistogramVersion}"
        implementation "org.hsqldb:hsqldb:${project.hsqldbVersion}"
        implementation "org.javassist:javassist:${project.javassistVersion}"
        implementation "org.jvnet.mimepull:mimepull:${project.jvnetMimepullVersion}"
        implementation "org.mockito:mockito-all:${project.mockitoAllVersion}"
        implementation "org.powermock:powermock-mockito-release-full:${project.powermockMockitoReleaseVersion}"
        implementation "org.powermock:powermock-module-testng-common:${project.powermockModuleTestngVersion}"
        implementation "org.mvel:mvel2:${project.mvel2Version}"
        implementation "org.ow2.asm:asm:${project.ow2AsmVersion}"
        implementation "org.ow2.asm:asm-util:${project.ow2AsmUtilVersion}"
        implementation "org.ow2.asm:asm-tree:${project.ow2AsmTreeVersion}"
        implementation "org.scala-lang:scala-library:${project.scalaLibraryVersion}"
        implementation "org.slf4j:slf4j-simple:${project.slf4jSimpleVersion}"
        implementation "org.slf4j:slf4j-jdk14:${project.slf4jJdk14Version}"
        implementation "org.testng:testng:${project.testngVersion}"
        implementation "org.wso2.carbon.messaging:org.wso2.carbon.messaging:${project.wso2CarbonMessagingVersion}"
        implementation "org.yaml:snakeyaml:${project.snakeyamlVersion}"
        implementation "org.wso2.transport.http:org.wso2.transport.http.netty:${project.wso2TransportHttpVersion}"
        implementation "org.wso2.transport.file:org.wso2.transport.local-file-system:${project.wso2TransportLocalFileSystemVersion}"
        implementation "org.wso2.staxon:staxon-core:${project.wso2StaxonCoreVersion}"
        implementation "org.quartz-scheduler:quartz:${project.quartzSchedulerVersion}"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${project.jacksonDatatypeJsr310Version}"

        implementation "info.picocli:picocli:${project.picocliVersion}"
        implementation "io.ballerina.messaging:broker-common:${project.balMessagingBrokerCommonVersion}"
        implementation "io.ballerina.messaging:broker-core:${project.balMessagingBrokerCoreVersion}"
        implementation "io.ballerina.messaging:broker-amqp:${project.balMessagingBrokerAmqpVersion}"
        implementation "io.dropwizard.metrics:metrics-core:${project.dropwizardMetricsCoreVersion}"
        implementation "io.netty:netty-codec:${project.nettyCodecVersion}"
        implementation "io.netty:netty-buffer:${project.nettyBufferVersion}"
        implementation "io.netty:netty-common:${project.nettyCommonVersion}"
        implementation "io.netty:netty-codec-http:${project.nettyCodecHttpVersion}"
        implementation "io.netty:netty-codec-http2:${project.nettyCodecHttp2Version}"
        implementation "io.netty:netty-handler:${project.nettyHandlerVersion}"
        implementation "io.netty:netty-transport:${project.nettyTransportVersion}"
        implementation "io.opentelemetry:opentelemetry-api:${project.openTelemetryApiVersion}"
        implementation "io.opentelemetry:opentelemetry-sdk-trace:${project.openTelemetrySdkTraceVersion}"
        implementation "io.opentelemetry:opentelemetry-sdk-testing:${project.openTelemetrySdkTestingVersion}"
        implementation "io.swagger.core.v3:swagger-models:${project.swaggerModelsVersion}"
        implementation "io.swagger.parser.v3:swagger-parser:${project.swaggerParserVersion}"
        implementation "io.swagger.parser.v3:swagger-parser-v2-converter:${project.swaggerParserV2Version}"
        implementation "me.tongfei:progressbar:${project.tongfeiProgressbarVersion}"
        implementation "org.jline:jline:${project.jlineVersion}"
        implementation "jakarta.activation:jakarta.activation-api:${project.jakartaActivationVersion}"
        implementation "com.github.zafarkhaja:java-semver:${project.zafarkhajaJsemverVersion}"

        implementation "javax.transaction:javax.transaction-api:${project.javaxTransactionApiVersion}"
        implementation "javax.ws.rs:javax.ws.rs-api:${project.javaxWsRsApi}"
        implementation "junit:junit:${project.junitVersion}"
    }
}

sourceCompatibility = '1.11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

checkstyle {
    toolVersion "${project.checkStyleToolVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

spotbugsMain {
    jvmArgs '-Xmx2048m'
    it.effort "max"
    it.reportLevel "low"
    it.reports {
        xml.enabled false
        html.enabled true
    }
    def excludeFile = file('spotbugs-exclude.xml')
    if(excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
}

spotbugsTest {
    it.enabled = false
}

test {
    testLogging {
        // Make sure output from standard out or error is shown in Gradle output.
        showStackTraces = true
        showStandardStreams = true
    }
    systemProperty "ballerina.home", "$buildDir"
    systemProperty "org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog"
    systemProperty "LANG_REPO_BUILD", "true"
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task createJavadoc(type: Javadoc) {
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    failOnError false //Temporary disabled to avoid build failure
    options.addStringOption('Xwerror', '-quiet')
}

check {
    dependsOn createJavadoc
}

task jacocoMergeExec(type: JacocoMerge) {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
        executionData = fileTree("$buildDir/jacoco/").matching {
            include "**.exec"
        } as FileCollection
}

publishing {
    publications {
        mavenJava {
            from components.java
        }
    }
}

test.finalizedBy(jacocoMergeExec)
//compileJava {
//    doFirst {
//        inputs.property("moduleName", moduleName)
//        options.compilerArgs = [
//                '--module-path', classpath.asPath,
//        ]
//        classpath = files()
//    }
//}
