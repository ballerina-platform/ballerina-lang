import org.gradle.internal.os.OperatingSystem
import org.apache.tools.ant.filters.*

import java.util.jar.Attributes
import java.util.jar.JarOutputStream
import java.util.jar.Manifest

apply from: "$rootDir/gradle/birTestableProject.gradle"

configurations {
}

project.ext.orgName = file('src/main/ballerina/Ballerina.toml').text.split("\n")[1].split("=")[1].split("\"")[1]
project.ext.version = file('src/main/ballerina/Ballerina.toml').text.split("\n")[2].split("=")[1].split("\"")[1]
project.ext.moduleName = files(file('src/main/ballerina/src').listFiles()).filter { File f ->
    f.isDirectory() && f.name != 'target' && f.name != '.ballerina'
}.singleFile.name

def generatedBirDir = "$buildDir/generated-bir/" + project.ext.orgName + "/" + project.ext.moduleName + "/" + project
        .ext.version +"/"

tasks.register('copyTomlFiles', Copy) {
    dependsOn compileJava
    from('src/main/ballerina') {
        include '*.toml'
    }
    filter(ReplaceTokens, tokens: ['project.version': project.version])
    into generatedBirDir
}

tasks.register('createBir') {
    dependsOn createBala

    doLast {
        copy {
            def zipFile = zipTree("$buildDir/generated-bala/repo/" + project.ext.orgName + "/" + project.ext
                    .moduleName + "/" + project.ext.version + "/" + project.ext.moduleName + ".zip").matching {
                include "**/*.bir"
            }.files
            from zipFile
            into generatedBirDir
        }
    }

    inputs.file "$buildDir/generated-bala/repo/" + project.ext.orgName + "/" + project.ext.moduleName + "/" + project
            .ext.version + "/" + project.ext.moduleName + ".zip"
    outputs.dir "$buildDir/generated-bir"
}

tasks.register('createCacheEntries') {
    dependsOn createBir
    dependsOn copyExternalMappingNextToBir
    dependsOn copyTomlFiles
}

tasks.register('copySelfToBirCache', Copy) {
    dependsOn createCacheEntries
    from "$buildDir/generated-bir"
    into "$buildDir/bir-cache"
}

tasks.register('createBirZipArtifact', Zip) {
    from "$buildDir/generated-bir"
    include '**/*'
    archiveName "$project.name-bir-artifact.zip"
    destinationDir(file("$buildDir/bir-artifact/"))
}

publishing {
    publications {
        mavenJava {
            if (file("$buildDir/generated-bir-jar/" + moduleName + ".jar").exists()) {
                artifact source: file("$buildDir/generated-bir-jar/" + moduleName + ".jar"), classifier: "bir-jar"
            }
            if (file("$buildDir/generated-bir/ballerina/" + moduleName + "/" + project.ext.version + "/" + moduleName 
                    + ".bir").exists()) {
                artifact source: createBirZipArtifact, classifier: "bir", extension: 'zip'
            }
            if (file("$buildDir/generated-bir/ballerinax/" + moduleName + "/" + project.ext.version + "/" + moduleName
                    + ".bir").exists()) {
                artifact source: createBirZipArtifact, classifier: "bir", extension: 'zip'
            }
        }
    }
}

test {
    dependsOn copySelfToBirCache
    dependsOn createBala

    classpath += files("$buildDir/generated-bir-jar/" + project.ext.orgName + '-' + moduleName + "-" + project.ext
            .version + ".jar")
}

artifacts {
    bir file("$buildDir/generated-bir/"), { builtBy(createCacheEntries) }
    birJar file("$buildDir/generated-bir-jar/" + project.ext.orgName + '-' + moduleName + "-" + project.ext.version +
            ".jar"), { builtBy(createBala) }
}

def getJarCreationCommand(it, generatedBirDir, mapPath, jarsToBeLoaded) {
    def commands = []
    if (OperatingSystem.current().isWindows()) {
        commands = [ 'cmd', '/c', 'java', '-cp', '"' + new File(it, '/bre/lib/*"')];
    } else {
        def classPath = fileTree(new File(it, '/bre/lib/')).filter{ it.isFile() }.files.path.join(':')
        commands = [ 'java', '-cp', classPath];
    }
    commands.addAll(getCompilerBackendArgs(it, generatedBirDir, mapPath))
    commands.add("$buildDir/classpath/" + project.ext.moduleName + ".jar")
    return commands
}

/*
 This method generates a jar file which has only the MANIFEST file with a Class-Path entry to have all the jars
 that will be passed with java cmd as class path entries. This is added to avoid cmd too long issue that can come
 in windows build environment.
*/
static def createClassPathJar(outputName, Set jarsToBeLoaded) {
    Manifest manifest = new Manifest()
    manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0")
    String classPathEntry = ""
    Iterator iterator = jarsToBeLoaded.iterator()
    while (iterator.hasNext()) {
        File jarFile = new File(iterator.next().toString())
        if (OperatingSystem.current().isWindows()) {
            classPathEntry = classPathEntry.concat("/").concat(jarFile.getCanonicalPath().replace("\\", "/"))
        } else {
            classPathEntry = classPathEntry.concat(jarFile.getCanonicalPath())
        }
        if (iterator.hasNext()) {
            classPathEntry = classPathEntry.concat(" ")
        }
    }
    println "Class-Path : " + classPathEntry
    manifest.getMainAttributes().put(Attributes.Name.CLASS_PATH, classPathEntry)
    File classpathJarFile = new File(outputName)
    classpathJarFile.parentFile.mkdir()
    JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(classpathJarFile), manifest)
    jarOutputStream.finish()
}

def printJarCreationCommand(it, generatedBirDir, mapPath, jarsToBeLoaded) {
    def commands = []
    if (OperatingSystem.current().isWindows()) {
        commands = [ 'cmd', '/c', 'java', '-cp']
    } else {
        commands = [ 'java', '-cp']
    }

    commands.add('"' + new File(it, '/bre/lib/*"'))
    commands.addAll(getCompilerBackendArgs(it, generatedBirDir, mapPath))
    commands.add("$buildDir/classpath/" + project.ext.moduleName + ".jar")
    println commands
}

def getCompilerBackendArgs(it, generatedBirDir, mapPath) {
    return ['ballerina.compiler_backend_jvm.___init',
            generatedBirDir + project.ext.moduleName + '.bir',
            mapPath,
            "$buildDir/generated-bir-jar/" + project.ext.moduleName + ".jar",
            'false',
            'false',
            "1",
            "$buildDir/bir-cache"]
}
