/*
 *  Copyright (c) 2024, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    id 'javaProject'
}

configurations {
    dist {
        transitive false
    }
    distributionBala {
        transitive false
    }

    balDoc {
        transitive false
    }

    distributionBirJar {
        transitive false
    }
    interopImports
    balaCreat {
        transitive false
    }
}

dependencies {
    balaCreat project(':lib-creator')

    distributionBala project(path: ':ballerina-lang:annotations', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:jballerina.java', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:internal', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:array', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:decimal', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:error', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:floatingpoint', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:function', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:future', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:integer', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:map', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:object', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:stream', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:table', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:string', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:typedesc', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:value', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:xml', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:bool', configuration: 'distributionBala')
    //distributionBala project(path: ':ballerina-lang-test', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:query', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:transaction', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:regexp', configuration: 'distributionBala')
    distributionBala project(path: ':ballerina-lang:runtime', configuration: 'distributionBala')
}

@CacheableTask
class BallerinaLangNativeLibBuildTask extends JavaExec {
    @Internal def projectDir = project.layout.buildDirectory.dir("ballerina-src")
    @Internal def distCache = project.layout.buildDirectory
    @Internal def pkgName = project.name
    @Internal def skipBootstrap = 'false'
    @Internal def outputJarFileName = ''

    @InputFiles
    @PathSensitive(PathSensitivity.RELATIVE)
    def srcDir = project.files("src/main/ballerina")

    @OutputFile
    def zipFile = projectDir.map{ it.file("target/" + project.ext.modName + ".zip") }

    @OutputFile
    def jarFile = projectDir.map{ it.file("target/" + outputJarFileName + ".jar") }

    @Override @Internal
    List<CommandLineArgumentProvider> getJvmArgumentProviders() {
        return super.getJvmArgumentProviders()
    }

    BallerinaLangNativeLibBuildTask() {
        setMainClass('org.ballerinalang.stdlib.utils.BuildLangLib')
        standardOutput = System.out
        errorOutput = System.err
    }

    @Override
    void exec() {
        def args = []
        args << projectDir.get().toString()
        args << distCache.get().toString()
        args << pkgName
        args << skipBootstrap

        super.setArgs(args)
        super.exec()
    }

    @Override
    JavaExec args(Object... args) {
        throw new UnsupportedOperationException()
    }

    @Override
    JavaExecSpec args(Iterable<?> args) {
        throw new UnsupportedOperationException()
    }

}

tasks.register('createDistributionCache') {
    dependsOn configurations.distributionBala
    doLast {
        configurations.distributionBala.each { artifact ->
            copy {
                from zipTree(artifact.getPath())
                into "$buildDir/repo"
            }
        }
    }
}

tasks.register('copyRuntime') {
    dependsOn configurations.dist
    doFirst {
        configurations.dist.each { artifact ->
            copy {
                from artifact.getPath()
                into "$buildDir/bre/lib"
            }
        }
    }
}

tasks.register('copyInteropImports', Copy) {
    into "$buildDir/libs"
    from configurations.interopImports
}

ext {
    if (project.projectDir.name == "debug-adapter-runtime") {
        modName = "debugger_helpers"
    } else {
        modName = project.projectDir.name
    }
}

def ballerinaConfigFile = new File("${project.projectDir}/src/main/ballerina/Ballerina.toml")
def ballerinaConfigFileContent = ballerinaConfigFile.text
def modOrg = (ballerinaConfigFileContent =~ /org = "(.+)"/)[0][1]
def modVersion = (ballerinaConfigFileContent =~ /version = "(.+)"/)[0][1]
def jarFileName = modOrg + "-" + project.ext.modName + "-" + modVersion

tasks.register('copyBallerinaProject', Copy) {
    from project.projectDir.toString() + "/src/main/ballerina/"
    into project.buildDir.toString() + "/ballerina-src"
}

tasks.register('ballerinaLangLibBuild', BallerinaLangNativeLibBuildTask) {
    classpath = files(project.configurations.balaCreat, jar.archiveFile)
    outputJarFileName = jarFileName
    skipBootstrap = 'true'
    minHeapSize = "512m"
    maxHeapSize = "2048m"
    dependsOn copyRuntime
    dependsOn copyInteropImports
    dependsOn copyBallerinaProject
    dependsOn createDistributionCache
    dependsOn jar
}

artifacts {
    distributionBala file("$buildDir/ballerina-src/target/${project.ext.modName}.zip"), {
        builtBy(ballerinaLangLibBuild)
    }
    distributionBirJar file("$buildDir/ballerina-src/target/${jarFileName}.jar"), {
        builtBy(ballerinaLangLibBuild)
    }
    balDoc file("$buildDir/ballerina-src/target/apidocs/"), {
        builtBy(ballerinaLangLibBuild)
    }
}

build.dependsOn ballerinaLangLibBuild
