/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProjectWithExtBala.gradle"

configurations {
    balSource {
        transitive false
    }

    balDoc {
        transitive false
    }

    interopImports {
        transitive(true)
    }
}
project.ext.orgName = file('src/main/ballerina/Ballerina.toml').text.split("\n")[1].split("=")[1].split("\"")[1]

project.ext.moduleName = files(file('src/main/ballerina/src').listFiles()).filter { File f ->
    f.isDirectory() && f.name != 'target' && f.name != '.ballerina'
}.singleFile.name

project.ext.version = file('src/main/ballerina/Ballerina.toml').text.split("\n")[2].split("=")[1].split("\"")[1]


dependencies {
    interopImports project(':ballerina-runtime')
}

class CreateBalaTask extends JavaExec {
    def isBuiltin = 'false'
    def skipWarnings = 'false'
    def jvmTarget = 'false'
    def newParser = 'true'

    CreateBalaTask() {
        setMain('org.ballerinalang.stdlib.utils.GenerateBala')
        setEnableAssertions(true)
    }


    @Override
    void exec() {
        def args = []
        args << isBuiltin
        args << "src/main/ballerina/"
        args << "${project.buildDir}/generated-bala/repo/" + project.ext.orgName
        args << "${project.buildDir}/ballerina-home/main"
        args << skipWarnings
        args << jvmTarget
        args << "lang.__internal,lang.annotations,bir,jvm,utils"
        args << newParser

        super.setArgs(args)
        super.exec()
    }

    @Override
    JavaExec args(Object... args) {
        throw new UnsupportedOperationException()
    }

    @Override
    JavaExecSpec args(Iterable<?> args) {
        throw new UnsupportedOperationException()
    }

}

task copyExternalMappingNextToBir(type: Copy) {
    dependsOn compileJava
    from "$buildDir/classes/java/main/META-INF/this.map.json"
    into "$buildDir/generated-bir-jar"
    rename { project.ext.moduleName + ".map.json" }
    inputs.file "$buildDir/classes/java/main/META-INF/this.map.json"
    outputs.files("$buildDir/generated-bir-jar" + project.ext.moduleName + ".map.json")
}

jar {
    outputs.files("$buildDir/build/classes/java/main/META-INF/this.map.json")
}

task createBala(type: CreateBalaTask) {
    dependsOn createBalHome
    dependsOn jar
    dependsOn configurations.balaImplementation
    dependsOn copyExternalMappingNextToBir
    dependsOn configurations.interopImports
    File interopJars = new File("$buildDir/interopJars.txt")

    doFirst {
        interopJars.write ""

        project.configurations.interopImports.each { interopJars << it << '\n' }

        interopJars << jar.archivePath
    }

    classpath = project.configurations.balaCreat
//    classpath += files(jar.archivePath)

    environment 'BALLERINA_NATIVE_MAP', "./build/classes/java/main/META-INF/this.map.json"
    def balFiles = file("src/main/ballerina/")
    inputs.dir(balFiles)
    inputs.files(configurations.balaImplementation)
    inputs.files("$buildDir/build/classes/java/main/META-INF/this.map.json")
    outputs.dir("$buildDir/generated-bala")
    outputs.files("$buildDir/generated-bir-jar/" + project.ext.orgName + "-" +  project.ext.moduleName + "-" +
            project.ext.version + ".jar")
    outputs.files(interopJars)
    outputs.cacheIf { true }
}

artifacts {
    balaImplementation file("$buildDir/generated-bala/"), { builtBy(createBala) }
    balDoc file("$buildDir/generated-apidocs/"), { builtBy(createBala) }
    balSource file("src/main/ballerina/")
}

task copySelfToTestBalHome(type: Copy) {
    dependsOn createBala
    from "$buildDir/generated-bala"
    into "$buildDir/ballerina-home/test/lib"
}

task assembleArtifact(type: Zip) {
    dependsOn createBala
    archiveName "$project.name-ballerina-binary-repo.zip"
    destinationDir file("$buildDir/bal-repos/")
    from "build/generated-bala/"
    description "Assemble archive $archiveName into ${relativePath(destinationDir)}"
    outputs.dir("$buildDir/bal-repos/")
}

test {
    dependsOn copySelfToTestBalHome
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

publishing {
    publications {
        mavenJava {
            artifact source: assembleArtifact, classifier: "ballerina-binary-repo", extension: 'zip'
        }
    }
}

configurations {
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-simple'
    testImplementation.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
}

jar {
    archiveName project.ext.orgName + "-" + project.ext.moduleName + "-" + project.ext.version + "-java.jar"
}

apply from: "$rootDir/gradle/birProject.gradle"
