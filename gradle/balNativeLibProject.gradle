/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProjectWithExtBalo.gradle"

configurations {
    balSource {
        transitive false
    }

    interopImports {
        transitive(true)
    }
}
project.ext.orgName = file('src/main/ballerina/Ballerina.toml').text.split("\n")[1].split("=")[1].split("\"")[1]

project.ext.moduleName = files(file('src/main/ballerina/src').listFiles()).filter { File f ->
    f.isDirectory() && f.name != 'target' && f.name != '.ballerina'
}.singleFile.name



dependencies {
    interopImports project(':ballerina-runtime')
}
// TODO: remove project names
if (project.name != "ballerina-jvm" && project.name != "ballerina-backend-jvm" && project.name != "ballerina-bir") {

    dependencies {
        testRuntime project(':ballerina-jvm')
        testRuntime project(':ballerina-bir')
        testRuntime project(':ballerina-backend-jvm')

        testRuntime project(path: ':ballerina-backend-jvm', configuration: 'birJar')
        testRuntime project(path: ':ballerina-jvm', configuration: 'birJar')
        testRuntime project(path: ':ballerina-bir', configuration: 'birJar')
    }
}

class CreateBaloTask extends JavaExec {
    def isBuiltin = 'false'
    def skipWarnings = 'false'
    def jvmTarget = 'false'

    CreateBaloTask() {
        setMain('org.ballerinalang.stdlib.utils.GenerateBalo')
        setEnableAssertions(true)
    }


    @Override
    void exec() {
        def args = []
        args << isBuiltin
        args << "src/main/ballerina/"
        args << "${project.buildDir}/generated-balo/repo/" + project.ext.orgName
        args << "${project.buildDir}/ballerina-home/main"
        args << skipWarnings
        args << jvmTarget

        super.setArgs(args)
        super.exec()
    }

    @Override
    JavaExec args(Object... args) {
        throw new UnsupportedOperationException()
    }

    @Override
    JavaExecSpec args(Iterable<?> args) {
        throw new UnsupportedOperationException()
    }

}

task copyExternalMappingNextToBir(type: Copy) {
    dependsOn compileJava
    from "$buildDir/classes/java/main/META-INF/this.map.json"
    into "$buildDir/generated-bir-jar"
    rename { project.ext.moduleName + ".map.json" }
    inputs.file "$buildDir/classes/java/main/META-INF/this.map.json"
}


task createBalo(type: CreateBaloTask) {
    dependsOn createBalHome
    dependsOn jar
    dependsOn configurations.baloImplementation
    dependsOn copyExternalMappingNextToBir
    dependsOn configurations.interopImports
    File interopJars = new File("$buildDir/interopJars.txt")

    doFirst {
        interopJars.write ""

        project.configurations.interopImports.each { interopJars << it << '\n' }

        interopJars << jar.archivePath
    }

    classpath = project.configurations.baloCreat
    classpath += files(jar.archivePath)

    environment 'BALLERINA_NATIVE_MAP', "./build/classes/java/main/META-INF/this.map.json"
    def balFiles = file("src/main/ballerina/")
    inputs.dir(balFiles)
    inputs.files(configurations.baloImplementation)
    outputs.dir("$buildDir/generated-balo")
    outputs.dir("$buildDir/generated-bir-jar")
    outputs.files(interopJars)
    outputs.cacheIf { true }
}

task createBStringBalo(type: CreateBaloTask) {
    dependsOn createBalHome
    dependsOn jar
    dependsOn configurations.baloImplementation
    dependsOn copyExternalMappingNextToBir
    dependsOn configurations.interopImports
    File interopJars = new File("$buildDir/interopJars.txt")

    systemProperty "ballerina.bstring", true
    doFirst {
        interopJars.write ""

        project.configurations.interopImports.each { interopJars << it << '\n' }

        interopJars << jar.archivePath
    }

    classpath = project.configurations.baloCreat
    classpath += files(jar.archivePath)

    environment 'BALLERINA_NATIVE_MAP', "./build/classes/java/main/META-INF/this.map.json"
    def balFiles = file("src/main/ballerina/")
    inputs.dir(balFiles)
    inputs.files(configurations.baloImplementation)
    outputs.dir("$buildDir/generated-balo")
    outputs.dir("$buildDir/generated-bir-jar")
    outputs.files(interopJars)
    outputs.cacheIf { true }
    
}

artifacts {
    baloImplementation file("$buildDir/generated-balo/"), { builtBy(createBalo) }
    balSource file("src/main/ballerina/")
}

task copySelfToTestBalHome(type: Copy) {
    dependsOn createBalo
    from "$buildDir/generated-balo"
    into "$buildDir/ballerina-home/test/lib"
}

task assembleArtifact(type: Zip) {
    dependsOn createBalo
    archiveName "$project.name-ballerina-binary-repo.zip"
    destinationDir file("$buildDir/bal-repos/")
    from "build/generated-balo/"
    description "Assemble archive $archiveName into ${relativePath(destinationDir)}"
    outputs.dir("$buildDir/bal-repos/")
}

test {
    dependsOn copySelfToTestBalHome
}

publishing {
    publications {
        mavenJava {
            artifact source: assembleArtifact, classifier: "ballerina-binary-repo", extension: 'zip'
        }
    }
}

configurations {
    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    testCompile.exclude group: 'org.slf4j', module: 'slf4j-simple'
    testCompile.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
}

apply from: "$rootDir/gradle/birProject.gradle"
