/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
apply from: "$rootDir/gradle/javaProject.gradle"

dependencies {
    implementation project(':ballerina-tools-api')
    implementation project(':ballerina-parser')
    implementation project(':ballerina-runtime')
    implementation project(':toml-parser')
    implementation project(':central-client')
    implementation project(':maven-resolver')
    implementation project(':identifier-util')
    implementation 'com.moandjiezana.toml:toml4j'
    implementation "org.apache.commons:commons-compress:${project.apacheCommonsCompressVersion}"
    implementation 'io.netty:netty-buffer'
    implementation 'org.ow2.asm:asm'
    implementation 'commons-io:commons-io'
    implementation 'com.github.zafarkhaja:java-semver'
    testImplementation ("guru.nidi:graphviz-java") {
        because("We use this library to execute package resolution tests")
    }
    testCompile 'org.testng:testng'
    testCompile "org.mockito:mockito-core:${project.mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-core:${project.mockitoCoreVersion}"
}

description = 'Ballerina - Lang'

checkstyleMain {
    exclude 'io/ballerina/projects/internal/bala/BalaJson.java'
    exclude 'io/ballerina/projects/internal/bala/PackageJson.java'
    exclude 'io/ballerina/projects/internal/bala/CompilerPluginJson.java'
    exclude 'org/ballerinalang/toml/model/Module.java'
    exclude 'org/ballerinalang/toml/model/Bala.java'
    exclude 'org/ballerinalang/toml/model/LockFile.java'
    exclude 'org/ballerinalang/toml/model/LockFileImport.java'
    exclude 'io/ballerina/projects/internal/model/BalaJson.java'
    exclude 'io/ballerina/projects/internal/model/PackageJson.java'
    exclude 'io/ballerina/projects/internal/model/CompilerPluginToml.java'
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

processResources {
    include 'META-INF/services/*'
    include '**/tool.properties'
    include 'ballerina-toml-schema.json'
    include 'compiler.properties'
    include 'dependencies-toml-schema.json'
    include 'old-dependencies-toml-schema.json'
    include 'settings-toml-schema.json'
    filter { String line -> line.replace('${project.version}', "${project.version}")}
    filter { String line -> line.replace('${short.version}', "${project.shortVersion}")}
    filter { String line -> line.replace('${display.text}', "${project.versionDisplayText}")}
    filter { String line -> line.replace('${spec.version}', "${project.specVersion}")}
}

ext.moduleName = 'ballerina.lang'

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
