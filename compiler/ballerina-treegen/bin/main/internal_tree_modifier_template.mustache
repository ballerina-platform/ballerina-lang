/*
 *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package {{packageName}};

{{#imports}}
import {{name}};
{{/imports}}

/**
 * Produces a new tree by doing a depth-first traversal of the internal tree.
 * <p>
 * This is a generated class.
 *
 * @since 2.0.0
 */
public abstract class STTreeModifier extends STNodeTransformer<STNode> {
    {{#nodes}}
    {{^isAbstract}}

    @Override
    public {{internalClassName}} transform(
            {{internalClassName}} {{camelCaseExternalClassName}}) {
        {{#fields}}
        STNode {{fieldName}} = modifyNode({{camelCaseExternalClassName}}.{{fieldName}});
        {{/fields}}
        return {{camelCaseExternalClassName}}.modify(
                {{^syntaxKind}}{{camelCaseExternalClassName}}.kind, &#10;                {{/syntaxKind}}{{#fields}}{{fieldName}}{{^isLast}}, &#10;                {{/isLast}}{{/fields}});
    }
    {{/isAbstract}}
    {{/nodes}}

    // Tokens

    public STToken transform(STToken token) {
        return token;
    }

    public STIdentifierToken transform(STIdentifierToken identifier) {
        return identifier;
    }

    public STLiteralValueToken transform(STLiteralValueToken literalValueToken) {
        return literalValueToken;
    }

    public STDocumentationLineToken transform(STDocumentationLineToken documentationLineToken) {
        return documentationLineToken;
    }

    public STMissingToken transform(STMissingToken missingToken) {
        return missingToken;
    }

    // Misc

    public STNode transform(STNodeList nodeList) {
        if (nodeList.isEmpty()) {
            return nodeList;
        }

        boolean nodeModified = false;
        STNode[] newSTNodes = new STNode[nodeList.size()];
        for (int index = 0; index < nodeList.size(); index++) {
            STNode oldNode = nodeList.get(index);
            STNode newNode = modifyNode(oldNode);
            if (oldNode != newNode) {
                nodeModified = true;
            }
            newSTNodes[index] = newNode;
        }
        
        if (!nodeModified) {
            return nodeList;
        }

        return STNodeFactory.createNodeList(newSTNodes);
    }

    @Override
    protected STNode transformSyntaxNode(STNode node) {
        return node;
    }

    protected <T extends STNode> T modifyNode(T node) {
        if (node == null) {
            return null;
        }
        // TODO
        return (T) node.apply(this);
    }
}

