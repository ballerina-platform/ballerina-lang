/*
 *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package {{packageName}};

{{#imports}}
import {{name}};
{{/imports}}
{{#isAbstract}}

import java.util.Collection;
{{/isAbstract}}
{{^isAbstract}}

import java.util.Collection;
import java.util.Collections;
{{/isAbstract}}

/**
 * This is a generated internal syntax tree node.
 *
 * @since 2.0.0
 */
public{{#isAbstract}} abstract{{/isAbstract}} class {{internalClassName}} extends {{internalSuperClassName}} {
    {{#fields}}
    public final STNode {{fieldName}};
    {{/fields}}

    {{#isAbstract}}
    {{internalClassName}}(SyntaxKind kind) {
        super(kind);
    }

    {{internalClassName}}(SyntaxKind kind, Collection<STNodeDiagnostic> diagnostics) {
        super(kind, diagnostics);
    }
    {{/isAbstract}}
    {{^isAbstract}}
    {{internalClassName}}(
            {{^syntaxKind}}SyntaxKind kind, &#10;            {{/syntaxKind}}{{#fields}}STNode {{fieldName}}{{^isLast}}, &#10;            {{/isLast}}{{/fields}}) {
        this(
                {{^syntaxKind}}kind, &#10;                {{/syntaxKind}}{{#fields}}{{fieldName}}{{^isLast}}, &#10;                {{/isLast}}{{/fields}},
                Collections.emptyList());
    }

    {{internalClassName}}(
            {{^syntaxKind}}SyntaxKind kind, &#10;            {{/syntaxKind}}{{#fields}}STNode {{fieldName}}{{^isLast}}, &#10;            {{/isLast}}{{/fields}},
            Collection<STNodeDiagnostic> diagnostics) {
        super({{#syntaxKind}}SyntaxKind.{{syntaxKind}}{{/syntaxKind}}{{^syntaxKind}}kind{{/syntaxKind}}, diagnostics);
        {{#fields}}
        this.{{fieldName}} = {{fieldName}};
        {{/fields}}

        addChildren(
                {{#fields}}{{fieldName}}{{^isLast}}, &#10;                {{/isLast}}{{/fields}});
    }

    public STNode modifyWith(Collection<STNodeDiagnostic> diagnostics) {
        return new {{internalClassName}}(
                {{^syntaxKind}}this.kind, &#10;                {{/syntaxKind}}{{#fields}}this.{{fieldName}}{{^isLast}}, &#10;                {{/isLast}}{{/fields}},
                diagnostics);
    }

    public {{internalClassName}} modify(
            {{^syntaxKind}}SyntaxKind kind, &#10;            {{/syntaxKind}}{{#fields}}STNode {{fieldName}}{{^isLast}}, &#10;            {{/isLast}}{{/fields}}) {
        if (checkForReferenceEquality(
                {{#fields}}{{fieldName}}{{^isLast}}, &#10;                {{/isLast}}{{/fields}})) {
            return this;
        }

        return new {{internalClassName}}(
                {{^syntaxKind}}kind, &#10;                {{/syntaxKind}}{{#fields}}{{fieldName}}, &#10;                {{/fields}}diagnostics);
    }

    public Node createFacade(int position, NonTerminalNode parent) {
        return new {{externalClassName}}(this, position, parent);
    }

    @Override
    public void accept(STNodeVisitor visitor) {
        visitor.visit(this);
    }

    @Override
    public <T> T apply(STNodeTransformer<T> transformer) {
        return transformer.transform(this);
    }
    {{/isAbstract}}
}
